#pragma once
#include "ofMain.h"
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// #include "Python.h"
namespace py = pybind11;

// ============ Class =============
// ofBaseHasTexturePlanes
// ofBaseSoundInput
// ofBaseSoundOutput
// ofBaseURLFileLoader
// ofBaseMaterial
// ofParameter
// ofParameterGroup
// ofReadOnlyParameter
// ofSerialDeviceInfo
using ofBoolParameter       = ofParameter<bool>;
using ofCharParameter       = ofParameter<char>;
using ofIntParameter        = ofParameter<int>;
using ofFloatParameter      = ofParameter<float>;
using ofStringParameter     = ofParameter<string>;
using ofV2fParameter        = ofParameter<ofVec2f>;
using ofV3fParameter        = ofParameter<ofVec3f>;
using ofV4fParameter        = ofParameter<ofVec4f>;
// using ofPointParameter   = ofParameter<ofPoint>;
using ofColorParameter      = ofParameter<ofColor>;
using ofShortColorParameter = ofParameter<ofShortColor>;
using ofFloatColorParameter = ofParameter<ofFloatColor>;
// ========== ofBaseTypes.h Global Functions:==========
// bool ofIsVFlipped()


// class pyOfFloatParameterBase:public ofFloatParameter {
// public:
// 	pyOfFloatParameterBase(){}
// 	virtual ~pyOfFloatParameterBase(){ clean(); }

// 	void startListener() {
// 		addListener(this, &pyOfFloatParameterBase::onChanged);
// 	}
// 	void clean() {
// 		removeListener(this, &pyOfFloatParameterBase::onChanged);
// 	}
// 	virtual void onChanged(const float &v) {}
// };
// class pyOfFloatParameter:public pyOfFloatParameterBase {
// public:
// 	using pyOfFloatParameterBase::pyOfFloatParameterBase;
// 	void onChanged(const float &v) override { PYBIND11_OVERLOAD(void, pyOfFloatParameterBase, onChanged, v);}
// };

	



void pybind_types(py::module &m) {
	using namespace py::literals;

	// py::class_<ofAbstractParameter>(m, "ofAbstractParameter");
	// py::class_<ofParameter, ofAbstractParameter>(m, "ofParameter");
	// py::class_<ofParameterGroup, ofAbstractParameter>(m, "ofParameterGroup");
	// py::class_<ofReadOnlyParameter, ofAbstractParameter>(m, "ofReadOnlyParameter");

	py::class_<ofColor_<unsigned char>>(m, "ofColor", py::metaclass(), py::dynamic_attr())
		.def(py::init<>())
		.def(py::init<float, float>(), py::arg("gray"), py::arg("alpha")=ofColor_<unsigned char>::limit())
		.def(py::init<float, float, float, float>(), py::arg("red"), py::arg("green"), py::arg("blue"), py::arg("alpha")=ofColor_<unsigned char>::limit())
		// .def("__init__", [](ofColor_<unsigned char> &c, float gray, float alpha){ new (&c) ofColor_<unsigned char>(gray,alpha);}, py::arg("gray"), py::arg("alpha")=ofColor_<unsigned char>::limit())
		// .def("__init__", [](ofColor_<unsigned char> &c, float red, float green, float blue, float alpha){ new (&c) ofColor_<unsigned char>(red,green,blue,alpha);}, py::arg("red"), py::arg("green"), py::arg("blue"), py::arg("alpha")=ofColor_<unsigned char>::limit())
		.def("set", (void (ofColor_<unsigned char>::*)(float,float)) &ofColor_<unsigned char>::set, py::arg("gray"), py::arg("alpha")=ofColor_<unsigned char>::limit())
		.def("set", (void (ofColor_<unsigned char>::*)(float,float,float,float)) &ofColor_<unsigned char>::set, py::arg("red"), py::arg("green"), py::arg("blue"), py::arg("alpha")=ofColor_<unsigned char>::limit())
		.def("set", (void (ofColor_<unsigned char>::*)(const ofColor_<unsigned char> &)) &ofColor_<unsigned char>::set)
		.def("getLightness",   &ofColor_<unsigned char>::getLightness)
		.def("getBrightness",  &ofColor_<unsigned char>::getBrightness)
		.def("getSaturation",  &ofColor_<unsigned char>::getSaturation)
		.def("getHueAngle",    &ofColor_<unsigned char>::getHueAngle)
		.def("getHue",         &ofColor_<unsigned char>::getHue)
		.def("getHex",         &ofColor_<unsigned char>::getHex)
		.def("getNormalized",  &ofColor_<unsigned char>::getNormalized)
		.def("getInverted",    &ofColor_<unsigned char>::getInverted)
		.def("getClamped",     &ofColor_<unsigned char>::getClamped)
		.def("lerp",           &ofColor_<unsigned char>::lerp)
		.def("clamp",          &ofColor_<unsigned char>::clamp)
		.def("invert",         &ofColor_<unsigned char>::invert)
		.def("setHsb",         &ofColor_<unsigned char>::setHsb)
		.def("setHue",         &ofColor_<unsigned char>::setHue)
		.def("setHueAngle",    &ofColor_<unsigned char>::setHueAngle)
		.def("setSaturation",  &ofColor_<unsigned char>::setSaturation)
		.def("setBrightness",  &ofColor_<unsigned char>::setBrightness)
		.def(py::self +  py::self)
		.def(py::self +  float())
		.def(py::self += py::self)
		.def(py::self += float())
		.def(py::self -  py::self)
		.def(py::self -  float())
		.def(py::self -= py::self)
		.def(py::self -= float())
		.def(py::self *  py::self)
		.def(py::self *  float())
		.def(py::self *= py::self)
		.def(py::self *= float())
		.def(py::self /  py::self)
		.def(py::self /  float())
		.def(py::self /= py::self)
		.def(py::self /= float())
		.def(py::self == py::self)
		.def(py::self != py::self)
		.def("__neg__", [](const  ofColor_<unsigned char> &c ){
			ofColor_<unsigned char> result;
			result.set(c);
			result.invert();
			return result;
		}, py::is_operator())
		.def_static("limit",   &ofColor_<unsigned char>::limit)
		.def_static("fromHsb", &ofColor_<unsigned char>::fromHsb)
		.def_static("fromHex", &ofColor_<unsigned char>::fromHex, "hexColor"_a, "alpha"_a=ofColor_<unsigned char>::limit())
		.def_readwrite("r",    &ofColor_<unsigned char>::r)
		.def_readwrite("g",    &ofColor_<unsigned char>::g)
		.def_readwrite("b",    &ofColor_<unsigned char>::b)
		.def_readwrite("a",    &ofColor_<unsigned char>::a)
		.def_property_readonly_static("gray"           , [](py::object &cla) { return ofColor(ofColor_<unsigned char>::limit()/2); })
		.def_property_readonly_static("white"          , [](py::object &cla) { return ofColor(ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("red"            , [](py::object &cla) { return ofColor(ofColor_<unsigned char>::limit()          , 0                                         , 0); })
		.def_property_readonly_static("green"          , [](py::object &cla) { return ofColor(0                                         , ofColor_<unsigned char>::limit()          , 0); })
		.def_property_readonly_static("blue"           , [](py::object &cla) { return ofColor(0                                         , 0                                         , ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("cyan"           , [](py::object &cla) { return ofColor(0                                         , ofColor_<unsigned char>::limit()          , ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("magenta"        , [](py::object &cla) { return ofColor( ofColor_<unsigned char>::limit()         , 0                                         , ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("yellow"         , [](py::object &cla) { return ofColor( ofColor_<unsigned char>::limit()         , ofColor_<unsigned char>::limit()          , 0); })
		.def_property_readonly_static("black"          , [](py::object &cla) { return ofColor( 0                                        , 0                                         , 0); })
		.def_property_readonly_static("aliceBlue"      , [](py::object &cla) { return ofColor(0.941176*ofColor_<unsigned char>::limit() , 0.972549*ofColor_<unsigned char>::limit() , 1*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("antiqueWhite"   , [](py::object &cla) { return ofColor(0.980392*ofColor_<unsigned char>::limit() , 0.921569*ofColor_<unsigned char>::limit() , 0.843137*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("aqua"           , [](py::object &cla) { return ofColor(0*ofColor_<unsigned char>::limit()        , 1*ofColor_<unsigned char>::limit()        , 1*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("aquamarine"     , [](py::object &cla) { return ofColor(0.498039*ofColor_<unsigned char>::limit() , 1*ofColor_<unsigned char>::limit()        , 0.831373*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("azure"          , [](py::object &cla) { return ofColor(0.941176*ofColor_<unsigned char>::limit() , 1*ofColor_<unsigned char>::limit()        , 1*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("beige"          , [](py::object &cla) { return ofColor(0.960784*ofColor_<unsigned char>::limit() , 0.960784*ofColor_<unsigned char>::limit() , 0.862745*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("bisque"         , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()        , 0.894118*ofColor_<unsigned char>::limit() , 0.768627*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("blanchedAlmond" , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()        , 0.921569*ofColor_<unsigned char>::limit() , 0.803922*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("blueViolet"     , [](py::object &cla) { return ofColor(0.541176*ofColor_<unsigned char>::limit() , 0.168627*ofColor_<unsigned char>::limit() , 0.886275*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("brown"          , [](py::object &cla) { return ofColor(0.647059*ofColor_<unsigned char>::limit() , 0.164706*ofColor_<unsigned char>::limit() , 0.164706*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("burlyWood"      , [](py::object &cla) { return ofColor(0.870588*ofColor_<unsigned char>::limit() , 0.721569*ofColor_<unsigned char>::limit() , 0.529412*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("cadetBlue"      , [](py::object &cla) { return ofColor(0.372549*ofColor_<unsigned char>::limit() , 0.619608*ofColor_<unsigned char>::limit() , 0.627451*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("chartreuse"     , [](py::object &cla) { return ofColor(0.498039*ofColor_<unsigned char>::limit() , ofColor_<unsigned char>::limit()          , 0); })
		.def_property_readonly_static("chocolate"      , [](py::object &cla) { return ofColor(0.823529*ofColor_<unsigned char>::limit() , 0.411765*ofColor_<unsigned char>::limit() , 0.117647*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("coral"          , [](py::object &cla) { return ofColor( ofColor_<unsigned char>::limit()         , 0.498039*ofColor_<unsigned char>::limit() , 0.313726*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("cornflowerBlue" , [](py::object &cla) { return ofColor(0.392157*ofColor_<unsigned char>::limit() , 0.584314*ofColor_<unsigned char>::limit() , 0.929412*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("cornsilk"       , [](py::object &cla) { return ofColor(0.392157*ofColor_<unsigned char>::limit() , 0.972549*ofColor_<unsigned char>::limit() , 0.862745*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("crimson"        , [](py::object &cla) { return ofColor(0.862745*ofColor_<unsigned char>::limit() , 0.0784314*ofColor_<unsigned char>::limit(), 0.235294*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("darkBlue"       , [](py::object &cla) { return ofColor(0*ofColor_<unsigned char>::limit() , 0*ofColor_<unsigned char>::limit(), 0.545098*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("darkCyan"       , [](py::object &cla) { return ofColor(0*ofColor_<unsigned char>::limit() , 0.545098*ofColor_<unsigned char>::limit(), 0.545098*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("darkGoldenRod"  , [](py::object &cla) { return ofColor(0.721569*ofColor_<unsigned char>::limit() , 0.52549*ofColor_<unsigned char>::limit(),  0.0431373*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("darkGray"       , [](py::object &cla) { return ofColor(0.662745*ofColor_<unsigned char>::limit() , 0.662745*ofColor_<unsigned char>::limit(), 0.662745*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("darkGrey"       , [](py::object &cla) { return ofColor(0.662745*ofColor_<unsigned char>::limit() , 0.662745*ofColor_<unsigned char>::limit(), 0.662745*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("darkGreen"      , [](py::object &cla) { return ofColor(0*ofColor_<unsigned char>::limit() , 0.392157*ofColor_<unsigned char>::limit(), 0*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("darkKhaki"      , [](py::object &cla) { return ofColor(0.741176*ofColor_<unsigned char>::limit() , 0.717647*ofColor_<unsigned char>::limit(), 0.419608*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("darkMagenta"    , [](py::object &cla) { return ofColor(0.545098*ofColor_<unsigned char>::limit() , 0*ofColor_<unsigned char>::limit(), 0.545098*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("darkOliveGreen" , [](py::object &cla) { return ofColor(0.333333*ofColor_<unsigned char>::limit() , 0.419608*ofColor_<unsigned char>::limit(), 0.184314*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("darkorange"     , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit() , 0.54902*ofColor_<unsigned char>::limit(), 0*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("darkOrchid"     , [](py::object &cla) { return ofColor(0.6*ofColor_<unsigned char>::limit() , 0.196078*ofColor_<unsigned char>::limit(), 0.8*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("darkRed"        , [](py::object &cla) { return ofColor(0.545098*ofColor_<unsigned char>::limit() , 0, 0); })
		.def_property_readonly_static("darkSalmon"     , [](py::object &cla) { return ofColor(0.913725*ofColor_<unsigned char>::limit() , 0.588235*ofColor_<unsigned char>::limit(),0.478431*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("darkSeaGreen"   , [](py::object &cla) { return ofColor(0.560784*ofColor_<unsigned char>::limit() , 0.737255*ofColor_<unsigned char>::limit(),0.560784*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("darkSlateBlue"  , [](py::object &cla) { return ofColor(0.282353*ofColor_<unsigned char>::limit() , 0.239216*ofColor_<unsigned char>::limit(),0.545098*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("darkSlateGray"  , [](py::object &cla) { return ofColor(0.184314*ofColor_<unsigned char>::limit() , 0.309804*ofColor_<unsigned char>::limit(),0.309804*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("darkSlateGrey"  , [](py::object &cla) { return ofColor(0.184314*ofColor_<unsigned char>::limit() , 0.309804*ofColor_<unsigned char>::limit(),0.309804*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("darkTurquoise"  , [](py::object &cla) { return ofColor(0.184314*ofColor_<unsigned char>::limit() , 0.807843*ofColor_<unsigned char>::limit(),0.819608*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("darkViolet"     , [](py::object &cla) { return ofColor(0.580392*ofColor_<unsigned char>::limit()  , 0*ofColor_<unsigned char>::limit()         , 0.827451*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("deepPink"       , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.0784314*ofColor_<unsigned char>::limit() , 0.576471*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("deepSkyBlue"    , [](py::object &cla) { return ofColor(0*ofColor_<unsigned char>::limit()         , 0.74902*ofColor_<unsigned char>::limit()   , 1*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("dimGray"        , [](py::object &cla) { return ofColor(0.411765*ofColor_<unsigned char>::limit()  , 0.411765*ofColor_<unsigned char>::limit()  , 0.411765*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("dimGrey"        , [](py::object &cla) { return ofColor(0.411765*ofColor_<unsigned char>::limit()  , 0.411765*ofColor_<unsigned char>::limit()  , 0.411765*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("dodgerBlue"     , [](py::object &cla) { return ofColor(0.117647*ofColor_<unsigned char>::limit()  , 0.564706*ofColor_<unsigned char>::limit()  , 1*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("fireBrick"      , [](py::object &cla) { return ofColor(0.698039*ofColor_<unsigned char>::limit()  , 0.133333*ofColor_<unsigned char>::limit()  , 0.133333*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("floralWhite"    , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.980392*ofColor_<unsigned char>::limit()  , 0.941176*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("forestGreen"    , [](py::object &cla) { return ofColor(0.133333*ofColor_<unsigned char>::limit()  , 0.545098*ofColor_<unsigned char>::limit()  , 0.133333*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("fuchsia"        , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0*ofColor_<unsigned char>::limit()         , 1*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("gainsboro"      , [](py::object &cla) { return ofColor(0.862745*ofColor_<unsigned char>::limit()  , 0.862745*ofColor_<unsigned char>::limit()  , 0.862745*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("ghostWhite"     , [](py::object &cla) { return ofColor(0.972549*ofColor_<unsigned char>::limit()  , 0.972549*ofColor_<unsigned char>::limit()  , 1*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("gold"           , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.843137*ofColor_<unsigned char>::limit()  , 0*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("goldenRod"      , [](py::object &cla) { return ofColor(0.854902*ofColor_<unsigned char>::limit()  , 0.647059*ofColor_<unsigned char>::limit()  , 0.12549*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("grey"           , [](py::object &cla) { return ofColor(0.501961*ofColor_<unsigned char>::limit()  , 0.501961*ofColor_<unsigned char>::limit()  , 0.501961*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("greenYellow"    , [](py::object &cla) { return ofColor(0.678431*ofColor_<unsigned char>::limit()  , 1*ofColor_<unsigned char>::limit()         , 0.184314*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("honeyDew"       , [](py::object &cla) { return ofColor(0.941176*ofColor_<unsigned char>::limit()  , 1*ofColor_<unsigned char>::limit()         , 0.941176*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("hotPink"        , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.411765*ofColor_<unsigned char>::limit()  , 0.705882*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("indianRed"      , [](py::object &cla) { return ofColor(0.803922*ofColor_<unsigned char>::limit()  , 0.360784*ofColor_<unsigned char>::limit()  , 0.360784*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("indigo"         , [](py::object &cla) { return ofColor(0.294118*ofColor_<unsigned char>::limit()  , 0*ofColor_<unsigned char>::limit()         , 0.509804*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("ivory"          , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 1*ofColor_<unsigned char>::limit()         , 0.941176*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("khaki"          , [](py::object &cla) { return ofColor(0.941176*ofColor_<unsigned char>::limit()  , 0.901961*ofColor_<unsigned char>::limit()  , 0.54902*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lavender"       , [](py::object &cla) { return ofColor(0.901961*ofColor_<unsigned char>::limit()  , 0.901961*ofColor_<unsigned char>::limit()  , 0.980392*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lavenderBlush"  , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.941176*ofColor_<unsigned char>::limit()  , 0.960784*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lawnGreen"      , [](py::object &cla) { return ofColor(0.486275*ofColor_<unsigned char>::limit()  , 0.988235*ofColor_<unsigned char>::limit()  , 0*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lemonChiffon"   , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.980392*ofColor_<unsigned char>::limit()  , 0.803922*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lightBlue"      , [](py::object &cla) { return ofColor(0.678431*ofColor_<unsigned char>::limit()  , 0.847059*ofColor_<unsigned char>::limit()  , 0.901961*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lightCoral"     , [](py::object &cla) { return ofColor(0.941176*ofColor_<unsigned char>::limit()  , 0.501961*ofColor_<unsigned char>::limit()  , 0.501961*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lightCyan"      , [](py::object &cla) { return ofColor(0.878431*ofColor_<unsigned char>::limit()  , 1*ofColor_<unsigned char>::limit()         , 1*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lightGoldenRodYellow" , [](py::object &cla) { return ofColor(0.980392*ofColor_<unsigned char>::limit()  , 0.980392*ofColor_<unsigned char>::limit()  , 0.823529*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lightGray"      , [](py::object &cla) { return ofColor(0.827451*ofColor_<unsigned char>::limit()  , 0.827451*ofColor_<unsigned char>::limit()  , 0.827451*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lightGrey"      , [](py::object &cla) { return ofColor(0.827451*ofColor_<unsigned char>::limit()  , 0.827451*ofColor_<unsigned char>::limit()  , 0.827451*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lightGreen"     , [](py::object &cla) { return ofColor(0.564706*ofColor_<unsigned char>::limit()  , 0.933333*ofColor_<unsigned char>::limit()  , 0.564706*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lightPink"      , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.713726*ofColor_<unsigned char>::limit()  , 0.756863*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lightSalmon"    , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.627451*ofColor_<unsigned char>::limit()  , 0.478431*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lightSeaGreen"  , [](py::object &cla) { return ofColor(0.12549*ofColor_<unsigned char>::limit()   , 0.698039*ofColor_<unsigned char>::limit()  , 0.666667*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lightSkyBlue"   , [](py::object &cla) { return ofColor(0.529412*ofColor_<unsigned char>::limit()  , 0.807843*ofColor_<unsigned char>::limit()  , 0.980392*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lightSlateGray" , [](py::object &cla) { return ofColor(0.466667*ofColor_<unsigned char>::limit()  , 0.533333*ofColor_<unsigned char>::limit()  , 0.6*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lightSlateGrey" , [](py::object &cla) { return ofColor(0.466667*ofColor_<unsigned char>::limit()  , 0.533333*ofColor_<unsigned char>::limit()  , 0.6*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lightSteelBlue" , [](py::object &cla) { return ofColor(0.690196*ofColor_<unsigned char>::limit()  , 0.768627*ofColor_<unsigned char>::limit()  , 0.870588*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lightYellow"    , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 1*ofColor_<unsigned char>::limit()         , 0.878431*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("lime"           , [](py::object &cla) { return ofColor(0*ofColor_<unsigned char>::limit()         , 1*ofColor_<unsigned char>::limit()         , 0*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("limeGreen"      , [](py::object &cla) { return ofColor(0.196078*ofColor_<unsigned char>::limit()  , 0.803922*ofColor_<unsigned char>::limit()  , 0.196078*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("linen"          , [](py::object &cla) { return ofColor(0.980392*ofColor_<unsigned char>::limit()  , 0.941176*ofColor_<unsigned char>::limit()  , 0.901961*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("maroon"         , [](py::object &cla) { return ofColor(0.501961*ofColor_<unsigned char>::limit()  , 0*ofColor_<unsigned char>::limit()         , 0*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("mediumAquaMarine" , [](py::object &cla) { return ofColor(0.4*ofColor_<unsigned char>::limit()       , 0.803922*ofColor_<unsigned char>::limit()  , 0.666667*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("mediumBlue"       , [](py::object &cla) { return ofColor(0*ofColor_<unsigned char>::limit()         , 0*ofColor_<unsigned char>::limit()         , 0.803922*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("mediumOrchid"     , [](py::object &cla) { return ofColor(0.729412*ofColor_<unsigned char>::limit()  , 0.333333*ofColor_<unsigned char>::limit()  , 0.827451*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("mediumPurple"     , [](py::object &cla) { return ofColor(0.576471*ofColor_<unsigned char>::limit()  , 0.439216*ofColor_<unsigned char>::limit()  , 0.858824*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("mediumSeaGreen"   , [](py::object &cla) { return ofColor(0.235294*ofColor_<unsigned char>::limit()  , 0.701961*ofColor_<unsigned char>::limit()  , 0.443137*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("mediumSlateBlue"  , [](py::object &cla) { return ofColor(0.482353*ofColor_<unsigned char>::limit()  , 0.407843*ofColor_<unsigned char>::limit()  , 0.933333*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("mediumSpringGreen", [](py::object &cla) { return ofColor(0*ofColor_<unsigned char>::limit()         , 0.980392*ofColor_<unsigned char>::limit()  , 0.603922*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("mediumTurquoise"  , [](py::object &cla) { return ofColor(0.282353*ofColor_<unsigned char>::limit()  , 0.819608*ofColor_<unsigned char>::limit()  , 0.8*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("mediumVioletRed"  , [](py::object &cla) { return ofColor(0.780392*ofColor_<unsigned char>::limit()  , 0.0823529*ofColor_<unsigned char>::limit() , 0.521569*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("midnightBlue"     , [](py::object &cla) { return ofColor(0.0980392*ofColor_<unsigned char>::limit() , 0.0980392*ofColor_<unsigned char>::limit() , 0.439216*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("mintCream"        , [](py::object &cla) { return ofColor(0.960784*ofColor_<unsigned char>::limit()  , 1*ofColor_<unsigned char>::limit()         , 0.980392*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("mistyRose"        , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.894118*ofColor_<unsigned char>::limit()  , 0.882353*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("moccasin"         , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.894118*ofColor_<unsigned char>::limit()  , 0.709804*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("navajoWhite"      , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.870588*ofColor_<unsigned char>::limit()  , 0.678431*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("navy"             , [](py::object &cla) { return ofColor(0*ofColor_<unsigned char>::limit()         , 0*ofColor_<unsigned char>::limit()         , 0.501961*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("oldLace"          , [](py::object &cla) { return ofColor(0.992157*ofColor_<unsigned char>::limit()  , 0.960784*ofColor_<unsigned char>::limit()  , 0.901961*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("olive"            , [](py::object &cla) { return ofColor(0.501961*ofColor_<unsigned char>::limit()  , 0.501961*ofColor_<unsigned char>::limit()  , 0*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("oliveDrab"        , [](py::object &cla) { return ofColor(0.419608*ofColor_<unsigned char>::limit()  , 0.556863*ofColor_<unsigned char>::limit()  , 0.137255*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("orange"           , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.647059*ofColor_<unsigned char>::limit()  , 0*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("orangeRed"        , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.270588*ofColor_<unsigned char>::limit()  , 0*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("orchid"           , [](py::object &cla) { return ofColor(0.854902*ofColor_<unsigned char>::limit()  , 0.439216*ofColor_<unsigned char>::limit()  , 0.839216*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("paleGoldenRod"    , [](py::object &cla) { return ofColor(0.933333*ofColor_<unsigned char>::limit()  , 0.909804*ofColor_<unsigned char>::limit()  , 0.666667*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("paleGreen"        , [](py::object &cla) { return ofColor(0.596078*ofColor_<unsigned char>::limit()  , 0.984314*ofColor_<unsigned char>::limit()  , 0.596078*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("paleTurquoise"    , [](py::object &cla) { return ofColor(0.686275*ofColor_<unsigned char>::limit()  , 0.933333*ofColor_<unsigned char>::limit()  , 0.933333*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("paleVioletRed"    , [](py::object &cla) { return ofColor(0.858824*ofColor_<unsigned char>::limit()  , 0.439216*ofColor_<unsigned char>::limit()  , 0.576471*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("papayaWhip"   , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.937255*ofColor_<unsigned char>::limit()  , 0.835294*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("peachPuff"    , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.854902*ofColor_<unsigned char>::limit()  , 0.72549*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("peru"         , [](py::object &cla) { return ofColor(0.803922*ofColor_<unsigned char>::limit()  , 0.521569*ofColor_<unsigned char>::limit()  , 0.247059*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("pink"         , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.752941*ofColor_<unsigned char>::limit()  , 0.796078*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("plum"         , [](py::object &cla) { return ofColor(0.866667*ofColor_<unsigned char>::limit()  , 0.627451*ofColor_<unsigned char>::limit()  , 0.866667*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("powderBlue"   , [](py::object &cla) { return ofColor(0.690196*ofColor_<unsigned char>::limit()  , 0.878431*ofColor_<unsigned char>::limit()  , 0.901961*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("purple"       , [](py::object &cla) { return ofColor(0.501961*ofColor_<unsigned char>::limit()  , 0*ofColor_<unsigned char>::limit()         , 0.501961*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("rosyBrown"    , [](py::object &cla) { return ofColor(0.737255*ofColor_<unsigned char>::limit()  , 0.560784*ofColor_<unsigned char>::limit()  , 0.560784*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("royalBlue"    , [](py::object &cla) { return ofColor(0.254902*ofColor_<unsigned char>::limit()  , 0.411765*ofColor_<unsigned char>::limit()  , 0.882353*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("saddleBrown"  , [](py::object &cla) { return ofColor(0.545098*ofColor_<unsigned char>::limit()  , 0.270588*ofColor_<unsigned char>::limit()  , 0.0745098*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("salmon"       , [](py::object &cla) { return ofColor(0.980392*ofColor_<unsigned char>::limit()  , 0.501961*ofColor_<unsigned char>::limit()  , 0.447059*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("sandyBrown"   , [](py::object &cla) { return ofColor(0.956863*ofColor_<unsigned char>::limit()  , 0.643137*ofColor_<unsigned char>::limit()  , 0.376471*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("seaGreen"     , [](py::object &cla) { return ofColor(0.180392*ofColor_<unsigned char>::limit()  , 0.545098*ofColor_<unsigned char>::limit()  , 0.341176*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("seaShell"     , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.960784*ofColor_<unsigned char>::limit()  , 0.933333*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("sienna"       , [](py::object &cla) { return ofColor(0.627451*ofColor_<unsigned char>::limit()  , 0.321569*ofColor_<unsigned char>::limit()  , 0.176471*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("silver"       , [](py::object &cla) { return ofColor(0.752941*ofColor_<unsigned char>::limit()  , 0.752941*ofColor_<unsigned char>::limit()  , 0.752941*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("skyBlue"      , [](py::object &cla) { return ofColor(0.529412*ofColor_<unsigned char>::limit()  , 0.807843*ofColor_<unsigned char>::limit()  , 0.921569*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("slateBlue"    , [](py::object &cla) { return ofColor(0.415686*ofColor_<unsigned char>::limit()  , 0.352941*ofColor_<unsigned char>::limit()  , 0.803922*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("slateGray"    , [](py::object &cla) { return ofColor(0.439216*ofColor_<unsigned char>::limit()  , 0.501961*ofColor_<unsigned char>::limit()  , 0.564706*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("slateGrey"    , [](py::object &cla) { return ofColor(0.439216*ofColor_<unsigned char>::limit()  , 0.501961*ofColor_<unsigned char>::limit()  , 0.564706*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("snow"         , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.980392*ofColor_<unsigned char>::limit()  , 0.980392*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("springGreen"  , [](py::object &cla) { return ofColor(0*ofColor_<unsigned char>::limit()         , 1*ofColor_<unsigned char>::limit()         , 0.498039*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("steelBlue"    , [](py::object &cla) { return ofColor(0.27451*ofColor_<unsigned char>::limit()   , 0.509804*ofColor_<unsigned char>::limit()  , 0.705882*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("blueSteel"    , [](py::object &cla) { return ofColor(0.27451*ofColor_<unsigned char>::limit()   , 0.509804*ofColor_<unsigned char>::limit()  , 0.705882*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("tan"          , [](py::object &cla) { return ofColor(0.823529*ofColor_<unsigned char>::limit()  , 0.705882*ofColor_<unsigned char>::limit()  , 0.54902*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("teal"         , [](py::object &cla) { return ofColor(0*ofColor_<unsigned char>::limit()         , 0.501961*ofColor_<unsigned char>::limit()  , 0.501961*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("thistle"      , [](py::object &cla) { return ofColor(0.847059*ofColor_<unsigned char>::limit()  , 0.74902*ofColor_<unsigned char>::limit()   , 0.847059*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("tomato"       , [](py::object &cla) { return ofColor(1*ofColor_<unsigned char>::limit()         , 0.388235*ofColor_<unsigned char>::limit()  , 0.278431*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("turquoise"    , [](py::object &cla) { return ofColor(0.25098*ofColor_<unsigned char>::limit()   , 0.878431*ofColor_<unsigned char>::limit()  , 0.815686*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("violet"       , [](py::object &cla) { return ofColor(0.933333*ofColor_<unsigned char>::limit()  , 0.509804*ofColor_<unsigned char>::limit()  , 0.933333*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("wheat"        , [](py::object &cla) { return ofColor(0.960784*ofColor_<unsigned char>::limit()  , 0.870588*ofColor_<unsigned char>::limit()  , 0.701961*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("whiteSmoke"   , [](py::object &cla) { return ofColor(0.960784*ofColor_<unsigned char>::limit()  , 0.960784*ofColor_<unsigned char>::limit()  , 0.960784*ofColor_<unsigned char>::limit()); })
		.def_property_readonly_static("yellowGreen"  , [](py::object &cla) { return ofColor(0.603922*ofColor_<unsigned char>::limit()  , 0.803922*ofColor_<unsigned char>::limit()  , 0.196078*ofColor_<unsigned char>::limit()); })
		.def("__str__", [](const ofColor_<unsigned char> &c) { return "["+std::to_string(c.r)+", " + std::to_string(c.g) + ", " + std::to_string(c.b) + ", " + std::to_string(c.a) + "]";} );

	py::class_<ofColor_<unsigned short>>(m, "ofShortColor", py::metaclass(), py::dynamic_attr())
		.def(py::init<>())
		.def(py::init<float, float>(), py::arg("gray"), py::arg("alpha")=ofColor_<unsigned short>::limit())
		.def(py::init<float, float, float, float>(), py::arg("red"), py::arg("green"), py::arg("blue"), py::arg("alpha")=ofColor_<unsigned short>::limit())
		// .def("__init__", [](ofColor_<unsigned short> &c, float gray, float alpha){ new (&c) ofColor_<unsigned short>(gray,alpha);}, py::arg("gray"), py::arg("alpha")=ofColor_<unsigned short>::limit())
		// .def("__init__", [](ofColor_<unsigned short> &c, float red, float green, float blue, float alpha){ new (&c) ofColor_<unsigned short>(red,green,blue,alpha);}, py::arg("red"), py::arg("green"), py::arg("blue"), py::arg("alpha")=ofColor_<unsigned short>::limit())
		.def("set", (void (ofColor_<unsigned short>::*)(float,float)) &ofColor_<unsigned short>::set, py::arg("gray"), py::arg("alpha")=ofColor_<unsigned short>::limit())
		.def("set", (void (ofColor_<unsigned short>::*)(float,float,float,float)) &ofColor_<unsigned short>::set, py::arg("red"), py::arg("green"), py::arg("blue"), py::arg("alpha")=ofColor_<unsigned short>::limit())
		.def("set", (void (ofColor_<unsigned short>::*)(const ofColor_<unsigned short> &)) &ofColor_<unsigned short>::set)
		.def("getLightness",   &ofColor_<unsigned short>::getLightness)
		.def("getBrightness",  &ofColor_<unsigned short>::getBrightness)
		.def("getSaturation",  &ofColor_<unsigned short>::getSaturation)
		.def("getHueAngle",    &ofColor_<unsigned short>::getHueAngle)
		.def("getHue",         &ofColor_<unsigned short>::getHue)
		.def("getHex",         &ofColor_<unsigned short>::getHex)
		.def("getNormalized",  &ofColor_<unsigned short>::getNormalized)
		.def("getInverted",    &ofColor_<unsigned short>::getInverted)
		.def("getClamped",     &ofColor_<unsigned short>::getClamped)
		.def("lerp",           &ofColor_<unsigned short>::lerp)
		.def("clamp",          &ofColor_<unsigned short>::clamp)
		.def("invert",         &ofColor_<unsigned short>::invert)
		.def("setHsb",         &ofColor_<unsigned short>::setHsb)
		.def("setHue",         &ofColor_<unsigned short>::setHue)
		.def("setHueAngle",    &ofColor_<unsigned short>::setHueAngle)
		.def("setSaturation",  &ofColor_<unsigned short>::setSaturation)
		.def("setBrightness",  &ofColor_<unsigned short>::setBrightness)
		.def(py::self +  py::self)
		.def(py::self +  float())
		.def(py::self += py::self)
		.def(py::self += float())
		.def(py::self -  py::self)
		.def(py::self -  float())
		.def(py::self -= py::self)
		.def(py::self -= float())
		.def(py::self *  py::self)
		.def(py::self *  float())
		.def(py::self *= py::self)
		.def(py::self *= float())
		.def(py::self /  py::self)
		.def(py::self /= py::self)
		.def(py::self /  float())
		.def(py::self /= float())
		.def(py::self == py::self)
		.def(py::self != py::self)
		.def("__neg__", [](const  ofColor_<unsigned short> &c ){
			ofColor_<unsigned short> result;
			result.set(c);
			result.invert();
			return result;
		}, py::is_operator())
		.def_static("limit",   &ofColor_<unsigned short>::limit)
		.def_static("fromHsb", &ofColor_<unsigned short>::fromHsb)
		.def_static("fromHex", &ofColor_<unsigned short>::fromHex, "hexColor"_a, "alpha"_a=ofColor_<unsigned short>::limit())
		.def_readwrite("r",    &ofColor_<unsigned short>::r)
		.def_readwrite("g",    &ofColor_<unsigned short>::g)
		.def_readwrite("b",    &ofColor_<unsigned short>::b)
		.def_readwrite("a",    &ofColor_<unsigned short>::a)
		.def_property_readonly_static("gray"           , [](py::object &cla) { return ofShortColor(ofColor_<unsigned short>::limit()/2); })
		.def_property_readonly_static("white"          , [](py::object &cla) { return ofShortColor(ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("red"            , [](py::object &cla) { return ofShortColor(ofColor_<unsigned short>::limit()          , 0                                         , 0); })
		.def_property_readonly_static("green"          , [](py::object &cla) { return ofShortColor(0                                         , ofColor_<unsigned short>::limit()          , 0); })
		.def_property_readonly_static("blue"           , [](py::object &cla) { return ofShortColor(0                                         , 0                                         , ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("cyan"           , [](py::object &cla) { return ofShortColor(0                                         , ofColor_<unsigned short>::limit()          , ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("magenta"        , [](py::object &cla) { return ofShortColor( ofColor_<unsigned short>::limit()         , 0                                         , ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("yellow"         , [](py::object &cla) { return ofShortColor( ofColor_<unsigned short>::limit()         , ofColor_<unsigned short>::limit()          , 0); })
		.def_property_readonly_static("black"          , [](py::object &cla) { return ofShortColor( 0                                        , 0                                         , 0); })
		.def_property_readonly_static("aliceBlue"      , [](py::object &cla) { return ofShortColor(0.941176*ofColor_<unsigned short>::limit() , 0.972549*ofColor_<unsigned short>::limit() , 1*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("antiqueWhite"   , [](py::object &cla) { return ofShortColor(0.980392*ofColor_<unsigned short>::limit() , 0.921569*ofColor_<unsigned short>::limit() , 0.843137*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("aqua"           , [](py::object &cla) { return ofShortColor(0*ofColor_<unsigned short>::limit()        , 1*ofColor_<unsigned short>::limit()        , 1*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("aquamarine"     , [](py::object &cla) { return ofShortColor(0.498039*ofColor_<unsigned short>::limit() , 1*ofColor_<unsigned short>::limit()        , 0.831373*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("azure"          , [](py::object &cla) { return ofShortColor(0.941176*ofColor_<unsigned short>::limit() , 1*ofColor_<unsigned short>::limit()        , 1*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("beige"          , [](py::object &cla) { return ofShortColor(0.960784*ofColor_<unsigned short>::limit() , 0.960784*ofColor_<unsigned short>::limit() , 0.862745*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("bisque"         , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()        , 0.894118*ofColor_<unsigned short>::limit() , 0.768627*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("blanchedAlmond" , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()        , 0.921569*ofColor_<unsigned short>::limit() , 0.803922*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("blueViolet"     , [](py::object &cla) { return ofShortColor(0.541176*ofColor_<unsigned short>::limit() , 0.168627*ofColor_<unsigned short>::limit() , 0.886275*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("brown"          , [](py::object &cla) { return ofShortColor(0.647059*ofColor_<unsigned short>::limit() , 0.164706*ofColor_<unsigned short>::limit() , 0.164706*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("burlyWood"      , [](py::object &cla) { return ofShortColor(0.870588*ofColor_<unsigned short>::limit() , 0.721569*ofColor_<unsigned short>::limit() , 0.529412*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("cadetBlue"      , [](py::object &cla) { return ofShortColor(0.372549*ofColor_<unsigned short>::limit() , 0.619608*ofColor_<unsigned short>::limit() , 0.627451*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("shorttreuse"     , [](py::object &cla) {return ofShortColor(0.498039*ofColor_<unsigned short>::limit() , ofColor_<unsigned short>::limit()          , 0); })
		.def_property_readonly_static("chocolate"      , [](py::object &cla) { return ofShortColor(0.823529*ofColor_<unsigned short>::limit() , 0.411765*ofColor_<unsigned short>::limit() , 0.117647*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("coral"          , [](py::object &cla) { return ofShortColor( ofColor_<unsigned short>::limit()         , 0.498039*ofColor_<unsigned short>::limit() , 0.313726*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("cornflowerBlue" , [](py::object &cla) { return ofShortColor(0.392157*ofColor_<unsigned short>::limit() , 0.584314*ofColor_<unsigned short>::limit() , 0.929412*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("cornsilk"       , [](py::object &cla) { return ofShortColor(0.392157*ofColor_<unsigned short>::limit() , 0.972549*ofColor_<unsigned short>::limit() , 0.862745*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("crimson"        , [](py::object &cla) { return ofShortColor(0.862745*ofColor_<unsigned short>::limit() , 0.0784314*ofColor_<unsigned short>::limit(), 0.235294*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("darkBlue"       , [](py::object &cla) { return ofShortColor(0*ofColor_<unsigned short>::limit() , 0*ofColor_<unsigned short>::limit(), 0.545098*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("darkCyan"       , [](py::object &cla) { return ofShortColor(0*ofColor_<unsigned short>::limit() , 0.545098*ofColor_<unsigned short>::limit(), 0.545098*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("darkGoldenRod"  , [](py::object &cla) { return ofShortColor(0.721569*ofColor_<unsigned short>::limit() , 0.52549*ofColor_<unsigned short>::limit(),  0.0431373*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("darkGray"       , [](py::object &cla) { return ofShortColor(0.662745*ofColor_<unsigned short>::limit() , 0.662745*ofColor_<unsigned short>::limit(), 0.662745*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("darkGrey"       , [](py::object &cla) { return ofShortColor(0.662745*ofColor_<unsigned short>::limit() , 0.662745*ofColor_<unsigned short>::limit(), 0.662745*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("darkGreen"      , [](py::object &cla) { return ofShortColor(0*ofColor_<unsigned short>::limit() , 0.392157*ofColor_<unsigned short>::limit(), 0*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("darkKhaki"      , [](py::object &cla) { return ofShortColor(0.741176*ofColor_<unsigned short>::limit() , 0.717647*ofColor_<unsigned short>::limit(), 0.419608*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("darkMagenta"    , [](py::object &cla) { return ofShortColor(0.545098*ofColor_<unsigned short>::limit() , 0*ofColor_<unsigned short>::limit(), 0.545098*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("darkOliveGreen" , [](py::object &cla) { return ofShortColor(0.333333*ofColor_<unsigned short>::limit() , 0.419608*ofColor_<unsigned short>::limit(), 0.184314*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("darkorange"     , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit() , 0.54902*ofColor_<unsigned short>::limit(), 0*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("darkOrchid"     , [](py::object &cla) { return ofShortColor(0.6*ofColor_<unsigned short>::limit() , 0.196078*ofColor_<unsigned short>::limit(), 0.8*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("darkRed"        , [](py::object &cla) { return ofShortColor(0.545098*ofColor_<unsigned short>::limit() , 0, 0); })
		.def_property_readonly_static("darkSalmon"     , [](py::object &cla) { return ofShortColor(0.913725*ofColor_<unsigned short>::limit() , 0.588235*ofColor_<unsigned short>::limit(),0.478431*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("darkSeaGreen"   , [](py::object &cla) { return ofShortColor(0.560784*ofColor_<unsigned short>::limit() , 0.737255*ofColor_<unsigned short>::limit(),0.560784*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("darkSlateBlue"  , [](py::object &cla) { return ofShortColor(0.282353*ofColor_<unsigned short>::limit() , 0.239216*ofColor_<unsigned short>::limit(),0.545098*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("darkSlateGray"  , [](py::object &cla) { return ofShortColor(0.184314*ofColor_<unsigned short>::limit() , 0.309804*ofColor_<unsigned short>::limit(),0.309804*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("darkSlateGrey"  , [](py::object &cla) { return ofShortColor(0.184314*ofColor_<unsigned short>::limit() , 0.309804*ofColor_<unsigned short>::limit(),0.309804*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("darkTurquoise"  , [](py::object &cla) { return ofShortColor(0.184314*ofColor_<unsigned short>::limit() , 0.807843*ofColor_<unsigned short>::limit(),0.819608*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("darkViolet"     , [](py::object &cla) { return ofShortColor(0.580392*ofColor_<unsigned short>::limit()  , 0*ofColor_<unsigned short>::limit()         , 0.827451*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("deepPink"       , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.0784314*ofColor_<unsigned short>::limit() , 0.576471*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("deepSkyBlue"    , [](py::object &cla) { return ofShortColor(0*ofColor_<unsigned short>::limit()         , 0.74902*ofColor_<unsigned short>::limit()   , 1*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("dimGray"        , [](py::object &cla) { return ofShortColor(0.411765*ofColor_<unsigned short>::limit()  , 0.411765*ofColor_<unsigned short>::limit()  , 0.411765*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("dimGrey"        , [](py::object &cla) { return ofShortColor(0.411765*ofColor_<unsigned short>::limit()  , 0.411765*ofColor_<unsigned short>::limit()  , 0.411765*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("dodgerBlue"     , [](py::object &cla) { return ofShortColor(0.117647*ofColor_<unsigned short>::limit()  , 0.564706*ofColor_<unsigned short>::limit()  , 1*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("fireBrick"      , [](py::object &cla) { return ofShortColor(0.698039*ofColor_<unsigned short>::limit()  , 0.133333*ofColor_<unsigned short>::limit()  , 0.133333*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("floralWhite"    , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.980392*ofColor_<unsigned short>::limit()  , 0.941176*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("forestGreen"    , [](py::object &cla) { return ofShortColor(0.133333*ofColor_<unsigned short>::limit()  , 0.545098*ofColor_<unsigned short>::limit()  , 0.133333*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("fuchsia"        , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0*ofColor_<unsigned short>::limit()         , 1*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("gainsboro"      , [](py::object &cla) { return ofShortColor(0.862745*ofColor_<unsigned short>::limit()  , 0.862745*ofColor_<unsigned short>::limit()  , 0.862745*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("ghostWhite"     , [](py::object &cla) { return ofShortColor(0.972549*ofColor_<unsigned short>::limit()  , 0.972549*ofColor_<unsigned short>::limit()  , 1*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("gold"           , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.843137*ofColor_<unsigned short>::limit()  , 0*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("goldenRod"      , [](py::object &cla) { return ofShortColor(0.854902*ofColor_<unsigned short>::limit()  , 0.647059*ofColor_<unsigned short>::limit()  , 0.12549*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("grey"           , [](py::object &cla) { return ofShortColor(0.501961*ofColor_<unsigned short>::limit()  , 0.501961*ofColor_<unsigned short>::limit()  , 0.501961*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("greenYellow"    , [](py::object &cla) { return ofShortColor(0.678431*ofColor_<unsigned short>::limit()  , 1*ofColor_<unsigned short>::limit()         , 0.184314*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("honeyDew"       , [](py::object &cla) { return ofShortColor(0.941176*ofColor_<unsigned short>::limit()  , 1*ofColor_<unsigned short>::limit()         , 0.941176*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("hotPink"        , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.411765*ofColor_<unsigned short>::limit()  , 0.705882*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("indianRed"      , [](py::object &cla) { return ofShortColor(0.803922*ofColor_<unsigned short>::limit()  , 0.360784*ofColor_<unsigned short>::limit()  , 0.360784*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("indigo"         , [](py::object &cla) { return ofShortColor(0.294118*ofColor_<unsigned short>::limit()  , 0*ofColor_<unsigned short>::limit()         , 0.509804*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("ivory"          , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 1*ofColor_<unsigned short>::limit()         , 0.941176*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("khaki"          , [](py::object &cla) { return ofShortColor(0.941176*ofColor_<unsigned short>::limit()  , 0.901961*ofColor_<unsigned short>::limit()  , 0.54902*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lavender"       , [](py::object &cla) { return ofShortColor(0.901961*ofColor_<unsigned short>::limit()  , 0.901961*ofColor_<unsigned short>::limit()  , 0.980392*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lavenderBlush"  , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.941176*ofColor_<unsigned short>::limit()  , 0.960784*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lawnGreen"      , [](py::object &cla) { return ofShortColor(0.486275*ofColor_<unsigned short>::limit()  , 0.988235*ofColor_<unsigned short>::limit()  , 0*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lemonChiffon"   , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.980392*ofColor_<unsigned short>::limit()  , 0.803922*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lightBlue"      , [](py::object &cla) { return ofShortColor(0.678431*ofColor_<unsigned short>::limit()  , 0.847059*ofColor_<unsigned short>::limit()  , 0.901961*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lightCoral"     , [](py::object &cla) { return ofShortColor(0.941176*ofColor_<unsigned short>::limit()  , 0.501961*ofColor_<unsigned short>::limit()  , 0.501961*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lightCyan"      , [](py::object &cla) { return ofShortColor(0.878431*ofColor_<unsigned short>::limit()  , 1*ofColor_<unsigned short>::limit()         , 1*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lightGoldenRodYellow" , [](py::object &cla) { return ofShortColor(0.980392*ofColor_<unsigned short>::limit()  , 0.980392*ofColor_<unsigned short>::limit()  , 0.823529*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lightGray"      , [](py::object &cla) { return ofShortColor(0.827451*ofColor_<unsigned short>::limit()  , 0.827451*ofColor_<unsigned short>::limit()  , 0.827451*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lightGrey"      , [](py::object &cla) { return ofShortColor(0.827451*ofColor_<unsigned short>::limit()  , 0.827451*ofColor_<unsigned short>::limit()  , 0.827451*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lightGreen"     , [](py::object &cla) { return ofShortColor(0.564706*ofColor_<unsigned short>::limit()  , 0.933333*ofColor_<unsigned short>::limit()  , 0.564706*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lightPink"      , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.713726*ofColor_<unsigned short>::limit()  , 0.756863*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lightSalmon"    , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.627451*ofColor_<unsigned short>::limit()  , 0.478431*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lightSeaGreen"  , [](py::object &cla) { return ofShortColor(0.12549*ofColor_<unsigned short>::limit()   , 0.698039*ofColor_<unsigned short>::limit()  , 0.666667*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lightSkyBlue"   , [](py::object &cla) { return ofShortColor(0.529412*ofColor_<unsigned short>::limit()  , 0.807843*ofColor_<unsigned short>::limit()  , 0.980392*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lightSlateGray" , [](py::object &cla) { return ofShortColor(0.466667*ofColor_<unsigned short>::limit()  , 0.533333*ofColor_<unsigned short>::limit()  , 0.6*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lightSlateGrey" , [](py::object &cla) { return ofShortColor(0.466667*ofColor_<unsigned short>::limit()  , 0.533333*ofColor_<unsigned short>::limit()  , 0.6*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lightSteelBlue" , [](py::object &cla) { return ofShortColor(0.690196*ofColor_<unsigned short>::limit()  , 0.768627*ofColor_<unsigned short>::limit()  , 0.870588*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lightYellow"    , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 1*ofColor_<unsigned short>::limit()         , 0.878431*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("lime"           , [](py::object &cla) { return ofShortColor(0*ofColor_<unsigned short>::limit()         , 1*ofColor_<unsigned short>::limit()         , 0*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("limeGreen"      , [](py::object &cla) { return ofShortColor(0.196078*ofColor_<unsigned short>::limit()  , 0.803922*ofColor_<unsigned short>::limit()  , 0.196078*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("linen"          , [](py::object &cla) { return ofShortColor(0.980392*ofColor_<unsigned short>::limit()  , 0.941176*ofColor_<unsigned short>::limit()  , 0.901961*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("maroon"         , [](py::object &cla) { return ofShortColor(0.501961*ofColor_<unsigned short>::limit()  , 0*ofColor_<unsigned short>::limit()         , 0*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("mediumAquaMarine" , [](py::object &cla) { return ofShortColor(0.4*ofColor_<unsigned short>::limit()       , 0.803922*ofColor_<unsigned short>::limit()  , 0.666667*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("mediumBlue"       , [](py::object &cla) { return ofShortColor(0*ofColor_<unsigned short>::limit()         , 0*ofColor_<unsigned short>::limit()         , 0.803922*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("mediumOrchid"     , [](py::object &cla) { return ofShortColor(0.729412*ofColor_<unsigned short>::limit()  , 0.333333*ofColor_<unsigned short>::limit()  , 0.827451*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("mediumPurple"     , [](py::object &cla) { return ofShortColor(0.576471*ofColor_<unsigned short>::limit()  , 0.439216*ofColor_<unsigned short>::limit()  , 0.858824*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("mediumSeaGreen"   , [](py::object &cla) { return ofShortColor(0.235294*ofColor_<unsigned short>::limit()  , 0.701961*ofColor_<unsigned short>::limit()  , 0.443137*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("mediumSlateBlue"  , [](py::object &cla) { return ofShortColor(0.482353*ofColor_<unsigned short>::limit()  , 0.407843*ofColor_<unsigned short>::limit()  , 0.933333*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("mediumSpringGreen", [](py::object &cla) { return ofShortColor(0*ofColor_<unsigned short>::limit()         , 0.980392*ofColor_<unsigned short>::limit()  , 0.603922*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("mediumTurquoise"  , [](py::object &cla) { return ofShortColor(0.282353*ofColor_<unsigned short>::limit()  , 0.819608*ofColor_<unsigned short>::limit()  , 0.8*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("mediumVioletRed"  , [](py::object &cla) { return ofShortColor(0.780392*ofColor_<unsigned short>::limit()  , 0.0823529*ofColor_<unsigned short>::limit() , 0.521569*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("midnightBlue"     , [](py::object &cla) { return ofShortColor(0.0980392*ofColor_<unsigned short>::limit() , 0.0980392*ofColor_<unsigned short>::limit() , 0.439216*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("mintCream"        , [](py::object &cla) { return ofShortColor(0.960784*ofColor_<unsigned short>::limit()  , 1*ofColor_<unsigned short>::limit()         , 0.980392*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("mistyRose"        , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.894118*ofColor_<unsigned short>::limit()  , 0.882353*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("moccasin"         , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.894118*ofColor_<unsigned short>::limit()  , 0.709804*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("navajoWhite"      , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.870588*ofColor_<unsigned short>::limit()  , 0.678431*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("navy"             , [](py::object &cla) { return ofShortColor(0*ofColor_<unsigned short>::limit()         , 0*ofColor_<unsigned short>::limit()         , 0.501961*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("oldLace"          , [](py::object &cla) { return ofShortColor(0.992157*ofColor_<unsigned short>::limit()  , 0.960784*ofColor_<unsigned short>::limit()  , 0.901961*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("olive"            , [](py::object &cla) { return ofShortColor(0.501961*ofColor_<unsigned short>::limit()  , 0.501961*ofColor_<unsigned short>::limit()  , 0*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("oliveDrab"        , [](py::object &cla) { return ofShortColor(0.419608*ofColor_<unsigned short>::limit()  , 0.556863*ofColor_<unsigned short>::limit()  , 0.137255*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("orange"           , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.647059*ofColor_<unsigned short>::limit()  , 0*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("orangeRed"        , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.270588*ofColor_<unsigned short>::limit()  , 0*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("orchid"           , [](py::object &cla) { return ofShortColor(0.854902*ofColor_<unsigned short>::limit()  , 0.439216*ofColor_<unsigned short>::limit()  , 0.839216*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("paleGoldenRod"    , [](py::object &cla) { return ofShortColor(0.933333*ofColor_<unsigned short>::limit()  , 0.909804*ofColor_<unsigned short>::limit()  , 0.666667*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("paleGreen"        , [](py::object &cla) { return ofShortColor(0.596078*ofColor_<unsigned short>::limit()  , 0.984314*ofColor_<unsigned short>::limit()  , 0.596078*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("paleTurquoise"    , [](py::object &cla) { return ofShortColor(0.686275*ofColor_<unsigned short>::limit()  , 0.933333*ofColor_<unsigned short>::limit()  , 0.933333*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("paleVioletRed"    , [](py::object &cla) { return ofShortColor(0.858824*ofColor_<unsigned short>::limit()  , 0.439216*ofColor_<unsigned short>::limit()  , 0.576471*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("papayaWhip"   , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.937255*ofColor_<unsigned short>::limit()  , 0.835294*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("peachPuff"    , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.854902*ofColor_<unsigned short>::limit()  , 0.72549*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("peru"         , [](py::object &cla) { return ofShortColor(0.803922*ofColor_<unsigned short>::limit()  , 0.521569*ofColor_<unsigned short>::limit()  , 0.247059*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("pink"         , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.752941*ofColor_<unsigned short>::limit()  , 0.796078*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("plum"         , [](py::object &cla) { return ofShortColor(0.866667*ofColor_<unsigned short>::limit()  , 0.627451*ofColor_<unsigned short>::limit()  , 0.866667*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("powderBlue"   , [](py::object &cla) { return ofShortColor(0.690196*ofColor_<unsigned short>::limit()  , 0.878431*ofColor_<unsigned short>::limit()  , 0.901961*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("purple"       , [](py::object &cla) { return ofShortColor(0.501961*ofColor_<unsigned short>::limit()  , 0*ofColor_<unsigned short>::limit()         , 0.501961*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("rosyBrown"    , [](py::object &cla) { return ofShortColor(0.737255*ofColor_<unsigned short>::limit()  , 0.560784*ofColor_<unsigned short>::limit()  , 0.560784*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("royalBlue"    , [](py::object &cla) { return ofShortColor(0.254902*ofColor_<unsigned short>::limit()  , 0.411765*ofColor_<unsigned short>::limit()  , 0.882353*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("saddleBrown"  , [](py::object &cla) { return ofShortColor(0.545098*ofColor_<unsigned short>::limit()  , 0.270588*ofColor_<unsigned short>::limit()  , 0.0745098*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("salmon"       , [](py::object &cla) { return ofShortColor(0.980392*ofColor_<unsigned short>::limit()  , 0.501961*ofColor_<unsigned short>::limit()  , 0.447059*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("sandyBrown"   , [](py::object &cla) { return ofShortColor(0.956863*ofColor_<unsigned short>::limit()  , 0.643137*ofColor_<unsigned short>::limit()  , 0.376471*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("seaGreen"     , [](py::object &cla) { return ofShortColor(0.180392*ofColor_<unsigned short>::limit()  , 0.545098*ofColor_<unsigned short>::limit()  , 0.341176*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("seaShell"     , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.960784*ofColor_<unsigned short>::limit()  , 0.933333*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("sienna"       , [](py::object &cla) { return ofShortColor(0.627451*ofColor_<unsigned short>::limit()  , 0.321569*ofColor_<unsigned short>::limit()  , 0.176471*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("silver"       , [](py::object &cla) { return ofShortColor(0.752941*ofColor_<unsigned short>::limit()  , 0.752941*ofColor_<unsigned short>::limit()  , 0.752941*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("skyBlue"      , [](py::object &cla) { return ofShortColor(0.529412*ofColor_<unsigned short>::limit()  , 0.807843*ofColor_<unsigned short>::limit()  , 0.921569*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("slateBlue"    , [](py::object &cla) { return ofShortColor(0.415686*ofColor_<unsigned short>::limit()  , 0.352941*ofColor_<unsigned short>::limit()  , 0.803922*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("slateGray"    , [](py::object &cla) { return ofShortColor(0.439216*ofColor_<unsigned short>::limit()  , 0.501961*ofColor_<unsigned short>::limit()  , 0.564706*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("slateGrey"    , [](py::object &cla) { return ofShortColor(0.439216*ofColor_<unsigned short>::limit()  , 0.501961*ofColor_<unsigned short>::limit()  , 0.564706*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("snow"         , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.980392*ofColor_<unsigned short>::limit()  , 0.980392*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("springGreen"  , [](py::object &cla) { return ofShortColor(0*ofColor_<unsigned short>::limit()         , 1*ofColor_<unsigned short>::limit()         , 0.498039*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("steelBlue"    , [](py::object &cla) { return ofShortColor(0.27451*ofColor_<unsigned short>::limit()   , 0.509804*ofColor_<unsigned short>::limit()  , 0.705882*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("blueSteel"    , [](py::object &cla) { return ofShortColor(0.27451*ofColor_<unsigned short>::limit()   , 0.509804*ofColor_<unsigned short>::limit()  , 0.705882*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("tan"          , [](py::object &cla) { return ofShortColor(0.823529*ofColor_<unsigned short>::limit()  , 0.705882*ofColor_<unsigned short>::limit()  , 0.54902*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("teal"         , [](py::object &cla) { return ofShortColor(0*ofColor_<unsigned short>::limit()         , 0.501961*ofColor_<unsigned short>::limit()  , 0.501961*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("thistle"      , [](py::object &cla) { return ofShortColor(0.847059*ofColor_<unsigned short>::limit()  , 0.74902*ofColor_<unsigned short>::limit()   , 0.847059*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("tomato"       , [](py::object &cla) { return ofShortColor(1*ofColor_<unsigned short>::limit()         , 0.388235*ofColor_<unsigned short>::limit()  , 0.278431*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("turquoise"    , [](py::object &cla) { return ofShortColor(0.25098*ofColor_<unsigned short>::limit()   , 0.878431*ofColor_<unsigned short>::limit()  , 0.815686*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("violet"       , [](py::object &cla) { return ofShortColor(0.933333*ofColor_<unsigned short>::limit()  , 0.509804*ofColor_<unsigned short>::limit()  , 0.933333*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("wheat"        , [](py::object &cla) { return ofShortColor(0.960784*ofColor_<unsigned short>::limit()  , 0.870588*ofColor_<unsigned short>::limit()  , 0.701961*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("whiteSmoke"   , [](py::object &cla) { return ofShortColor(0.960784*ofColor_<unsigned short>::limit()  , 0.960784*ofColor_<unsigned short>::limit()  , 0.960784*ofColor_<unsigned short>::limit()); })
		.def_property_readonly_static("yellowGreen"  , [](py::object &cla) { return ofShortColor(0.603922*ofColor_<unsigned short>::limit()  , 0.803922*ofColor_<unsigned short>::limit()  , 0.196078*ofColor_<unsigned short>::limit()); })
		.def("__str__", [](const ofColor_<unsigned short> &c) { return "["+std::to_string(c.r)+", " + std::to_string(c.g) + ", " + std::to_string(c.b) + ", " + std::to_string(c.a) + "]";} );

	py::class_<ofColor_<float>>(m, "ofFloatColor",py::metaclass(), py::dynamic_attr())
		.def(py::init<>())
		.def(py::init<float, float>(), py::arg("gray"), py::arg("alpha")=ofColor_<float>::limit())
		.def(py::init<float, float, float, float>(), py::arg("red"), py::arg("green"), py::arg("blue"), py::arg("alpha")=ofColor_<float>::limit())
		// .def("__init__", [](ofColor_<float> &c, float gray, float alpha){ new (&c) ofColor_<float>(gray,alpha);}, py::arg("gray"), py::arg("alpha")=ofColor_<float>::limit())
		// .def("__init__", [](ofColor_<float> &c, float red, float green, float blue, float alpha){ new (&c) ofColor_<float>(red,green,blue,alpha);}, py::arg("red"), py::arg("green"), py::arg("blue"), py::arg("alpha")=ofColor_<float>::limit())
		.def("set", (void (ofColor_<float>::*)(float,float)) &ofColor_<float>::set, py::arg("gray"), py::arg("alpha")=ofColor_<float>::limit())
		.def("set", (void (ofColor_<float>::*)(float,float,float,float)) &ofColor_<float>::set, py::arg("red"), py::arg("green"), py::arg("blue"), py::arg("alpha")=ofColor_<float>::limit())
		.def("set", (void (ofColor_<float>::*)(const ofColor_<float> &)) &ofColor_<float>::set)
		.def("getLightness",    &ofColor_<float>::getLightness)
		.def("getBrightness",   &ofColor_<float>::getBrightness)
		.def("getSaturation",   &ofColor_<float>::getSaturation)
		.def("getHueAngle",     &ofColor_<float>::getHueAngle)
		.def("getHue",          &ofColor_<float>::getHue)
		.def("getHex",          &ofColor_<float>::getHex)
		.def("getNormalized",   &ofColor_<float>::getNormalized)
		.def("getInverted",     &ofColor_<float>::getInverted)
		.def("getClamped",      &ofColor_<float>::getClamped)
		.def("lerp",            &ofColor_<float>::lerp)
		.def("clamp",           &ofColor_<float>::clamp)
		.def("invert",          &ofColor_<float>::invert)
		.def("setHsb",          &ofColor_<float>::setHsb)
		.def("setHue",          &ofColor_<float>::setHue)
		.def("setHueAngle",     &ofColor_<float>::setHueAngle)
		.def("setSaturation",   &ofColor_<float>::setSaturation)
		.def("setBrightness",   &ofColor_<float>::setBrightness)
		.def_static("limit",    &ofColor_<float>::limit)
		.def(py::self +  py::self)
		.def(py::self +  float())
		.def(py::self += py::self)
		.def(py::self += float())
		.def(py::self -  py::self)
		.def(py::self -  float())
		.def(py::self -= py::self)
		.def(py::self -= float())
		.def(py::self *  py::self)
		.def(py::self *  float())
		.def(py::self *= py::self)
		.def(py::self *= float())
		.def(py::self /  py::self)
		.def(py::self /= py::self)
		.def(py::self /  float())
		.def(py::self /= float())
		.def(py::self == py::self)
		.def(py::self != py::self)
		.def("__neg__", [](const ofColor_<float> &c ){
			ofColor_<float> result;
			result.set(c);
			result.invert();
			return result;
		}, py::is_operator())
		.def_static("fromHsb",  &ofColor_<float>::fromHsb)
		.def_static("fromHex",  &ofColor_<float>::fromHex, "hexColor"_a, "alpha"_a=ofColor_<float>::limit())
		.def_readwrite("r",     &ofColor_<float>::r)
		.def_readwrite("g",     &ofColor_<float>::g)
		.def_readwrite("b",     &ofColor_<float>::b)
		.def_readwrite("a",     &ofColor_<float>::a)
		.def_property_readonly_static("gray"           , [](py::object &cla) { return ofFloatColor(ofColor_<float>::limit()/2); })
		.def_property_readonly_static("white"          , [](py::object &cla) { return ofFloatColor(ofColor_<float>::limit()); })
		.def_property_readonly_static("red"            , [](py::object &cla) { return ofFloatColor(ofColor_<float>::limit(), 0, 0); })
		.def_property_readonly_static("green"          , [](py::object &cla) { return ofFloatColor(0, ofColor_<float>::limit(), 0); })
		.def_property_readonly_static("blue"           , [](py::object &cla) { return ofFloatColor(0, 0, ofColor_<float>::limit()); })
		.def_property_readonly_static("cyan"           , [](py::object &cla) { return ofFloatColor(0, ofColor_<float>::limit(), ofColor_<float>::limit()); })
		.def_property_readonly_static("magenta"        , [](py::object &cla) { return ofFloatColor( ofColor_<float>::limit(), 0, ofColor_<float>::limit()); })
		.def_property_readonly_static("yellow"         , [](py::object &cla) { return ofFloatColor( ofColor_<float>::limit(), ofColor_<float>::limit(), 0); })
		.def_property_readonly_static("black"          , [](py::object &cla) { return ofFloatColor( 0, 0, 0); })
		.def_property_readonly_static("aliceBlue"      , [](py::object &cla) { return ofFloatColor(0.941176*ofColor_<float>::limit() , 0.972549*ofColor_<float>::limit() , 1*ofColor_<float>::limit()); })
		.def_property_readonly_static("antiqueWhite"   , [](py::object &cla) { return ofFloatColor(0.980392*ofColor_<float>::limit() , 0.921569*ofColor_<float>::limit() , 0.843137*ofColor_<float>::limit()); })
		.def_property_readonly_static("aqua"           , [](py::object &cla) { return ofFloatColor(0*ofColor_<float>::limit()        , 1*ofColor_<float>::limit()        , 1*ofColor_<float>::limit()); })
		.def_property_readonly_static("aquamarine"     , [](py::object &cla) { return ofFloatColor(0.498039*ofColor_<float>::limit() , 1*ofColor_<float>::limit()        , 0.831373*ofColor_<float>::limit()); })
		.def_property_readonly_static("azure"          , [](py::object &cla) { return ofFloatColor(0.941176*ofColor_<float>::limit() , 1*ofColor_<float>::limit()        , 1*ofColor_<float>::limit()); })
		.def_property_readonly_static("beige"          , [](py::object &cla) { return ofFloatColor(0.960784*ofColor_<float>::limit() , 0.960784*ofColor_<float>::limit() , 0.862745*ofColor_<float>::limit()); })
		.def_property_readonly_static("bisque"         , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()        , 0.894118*ofColor_<float>::limit() , 0.768627*ofColor_<float>::limit()); })
		.def_property_readonly_static("blanchedAlmond" , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()        , 0.921569*ofColor_<float>::limit() , 0.803922*ofColor_<float>::limit()); })
		.def_property_readonly_static("blueViolet"     , [](py::object &cla) { return ofFloatColor(0.541176*ofColor_<float>::limit() , 0.168627*ofColor_<float>::limit() , 0.886275*ofColor_<float>::limit()); })
		.def_property_readonly_static("brown"          , [](py::object &cla) { return ofFloatColor(0.647059*ofColor_<float>::limit() , 0.164706*ofColor_<float>::limit() , 0.164706*ofColor_<float>::limit()); })
		.def_property_readonly_static("burlyWood"      , [](py::object &cla) { return ofFloatColor(0.870588*ofColor_<float>::limit() , 0.721569*ofColor_<float>::limit() , 0.529412*ofColor_<float>::limit()); })
		.def_property_readonly_static("cadetBlue"      , [](py::object &cla) { return ofFloatColor(0.372549*ofColor_<float>::limit() , 0.619608*ofColor_<float>::limit() , 0.627451*ofColor_<float>::limit()); })
		.def_property_readonly_static("shorttreuse"     , [](py::object &cla) {return ofFloatColor(0.498039*ofColor_<float>::limit() , ofColor_<float>::limit()          , 0); })
		.def_property_readonly_static("chocolate"      , [](py::object &cla) { return ofFloatColor(0.823529*ofColor_<float>::limit() , 0.411765*ofColor_<float>::limit() , 0.117647*ofColor_<float>::limit()); })
		.def_property_readonly_static("coral"          , [](py::object &cla) { return ofFloatColor( ofColor_<float>::limit()         , 0.498039*ofColor_<float>::limit() , 0.313726*ofColor_<float>::limit()); })
		.def_property_readonly_static("cornflowerBlue" , [](py::object &cla) { return ofFloatColor(0.392157*ofColor_<float>::limit() , 0.584314*ofColor_<float>::limit() , 0.929412*ofColor_<float>::limit()); })
		.def_property_readonly_static("cornsilk"       , [](py::object &cla) { return ofFloatColor(0.392157*ofColor_<float>::limit() , 0.972549*ofColor_<float>::limit() , 0.862745*ofColor_<float>::limit()); })
		.def_property_readonly_static("crimson"        , [](py::object &cla) { return ofFloatColor(0.862745*ofColor_<float>::limit() , 0.0784314*ofColor_<float>::limit(), 0.235294*ofColor_<float>::limit()); })
		.def_property_readonly_static("darkBlue"       , [](py::object &cla) { return ofFloatColor(0*ofColor_<float>::limit() , 0*ofColor_<float>::limit(), 0.545098*ofColor_<float>::limit()); })
		.def_property_readonly_static("darkCyan"       , [](py::object &cla) { return ofFloatColor(0*ofColor_<float>::limit() , 0.545098*ofColor_<float>::limit(), 0.545098*ofColor_<float>::limit()); })
		.def_property_readonly_static("darkGoldenRod"  , [](py::object &cla) { return ofFloatColor(0.721569*ofColor_<float>::limit() , 0.52549*ofColor_<float>::limit(),  0.0431373*ofColor_<float>::limit()); })
		.def_property_readonly_static("darkGray"       , [](py::object &cla) { return ofFloatColor(0.662745*ofColor_<float>::limit() , 0.662745*ofColor_<float>::limit(), 0.662745*ofColor_<float>::limit()); })
		.def_property_readonly_static("darkGrey"       , [](py::object &cla) { return ofFloatColor(0.662745*ofColor_<float>::limit() , 0.662745*ofColor_<float>::limit(), 0.662745*ofColor_<float>::limit()); })
		.def_property_readonly_static("darkGreen"      , [](py::object &cla) { return ofFloatColor(0*ofColor_<float>::limit() , 0.392157*ofColor_<float>::limit(), 0*ofColor_<float>::limit()); })
		.def_property_readonly_static("darkKhaki"      , [](py::object &cla) { return ofFloatColor(0.741176*ofColor_<float>::limit() , 0.717647*ofColor_<float>::limit(), 0.419608*ofColor_<float>::limit()); })
		.def_property_readonly_static("darkMagenta"    , [](py::object &cla) { return ofFloatColor(0.545098*ofColor_<float>::limit() , 0*ofColor_<float>::limit(), 0.545098*ofColor_<float>::limit()); })
		.def_property_readonly_static("darkOliveGreen" , [](py::object &cla) { return ofFloatColor(0.333333*ofColor_<float>::limit() , 0.419608*ofColor_<float>::limit(), 0.184314*ofColor_<float>::limit()); })
		.def_property_readonly_static("darkorange"     , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit() , 0.54902*ofColor_<float>::limit(), 0*ofColor_<float>::limit()); })
		.def_property_readonly_static("darkOrchid"     , [](py::object &cla) { return ofFloatColor(0.6*ofColor_<float>::limit() , 0.196078*ofColor_<float>::limit(), 0.8*ofColor_<float>::limit()); })
		.def_property_readonly_static("darkRed"        , [](py::object &cla) { return ofFloatColor(0.545098*ofColor_<float>::limit() , 0, 0); })
		.def_property_readonly_static("darkSalmon"     , [](py::object &cla) { return ofFloatColor(0.913725*ofColor_<float>::limit() , 0.588235*ofColor_<float>::limit(),0.478431*ofColor_<float>::limit()); })
		.def_property_readonly_static("darkSeaGreen"   , [](py::object &cla) { return ofFloatColor(0.560784*ofColor_<float>::limit() , 0.737255*ofColor_<float>::limit(),0.560784*ofColor_<float>::limit()); })
		.def_property_readonly_static("darkSlateBlue"  , [](py::object &cla) { return ofFloatColor(0.282353*ofColor_<float>::limit() , 0.239216*ofColor_<float>::limit(),0.545098*ofColor_<float>::limit()); })
		.def_property_readonly_static("darkSlateGray"  , [](py::object &cla) { return ofFloatColor(0.184314*ofColor_<float>::limit() , 0.309804*ofColor_<float>::limit(),0.309804*ofColor_<float>::limit()); })
		.def_property_readonly_static("darkSlateGrey"  , [](py::object &cla) { return ofFloatColor(0.184314*ofColor_<float>::limit() , 0.309804*ofColor_<float>::limit(),0.309804*ofColor_<float>::limit()); })
		.def_property_readonly_static("darkTurquoise"  , [](py::object &cla) { return ofFloatColor(0.184314*ofColor_<float>::limit() , 0.807843*ofColor_<float>::limit(),0.819608*ofColor_<float>::limit()); })
		.def_property_readonly_static("darkViolet"     , [](py::object &cla) { return ofFloatColor(0.580392*ofColor_<float>::limit()  , 0*ofColor_<float>::limit()         , 0.827451*ofColor_<float>::limit()); })
		.def_property_readonly_static("deepPink"       , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.0784314*ofColor_<float>::limit() , 0.576471*ofColor_<float>::limit()); })
		.def_property_readonly_static("deepSkyBlue"    , [](py::object &cla) { return ofFloatColor(0*ofColor_<float>::limit()         , 0.74902*ofColor_<float>::limit()   , 1*ofColor_<float>::limit()); })
		.def_property_readonly_static("dimGray"        , [](py::object &cla) { return ofFloatColor(0.411765*ofColor_<float>::limit()  , 0.411765*ofColor_<float>::limit()  , 0.411765*ofColor_<float>::limit()); })
		.def_property_readonly_static("dimGrey"        , [](py::object &cla) { return ofFloatColor(0.411765*ofColor_<float>::limit()  , 0.411765*ofColor_<float>::limit()  , 0.411765*ofColor_<float>::limit()); })
		.def_property_readonly_static("dodgerBlue"     , [](py::object &cla) { return ofFloatColor(0.117647*ofColor_<float>::limit()  , 0.564706*ofColor_<float>::limit()  , 1*ofColor_<float>::limit()); })
		.def_property_readonly_static("fireBrick"      , [](py::object &cla) { return ofFloatColor(0.698039*ofColor_<float>::limit()  , 0.133333*ofColor_<float>::limit()  , 0.133333*ofColor_<float>::limit()); })
		.def_property_readonly_static("floralWhite"    , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.980392*ofColor_<float>::limit()  , 0.941176*ofColor_<float>::limit()); })
		.def_property_readonly_static("forestGreen"    , [](py::object &cla) { return ofFloatColor(0.133333*ofColor_<float>::limit()  , 0.545098*ofColor_<float>::limit()  , 0.133333*ofColor_<float>::limit()); })
		.def_property_readonly_static("fuchsia"        , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0*ofColor_<float>::limit()         , 1*ofColor_<float>::limit()); })
		.def_property_readonly_static("gainsboro"      , [](py::object &cla) { return ofFloatColor(0.862745*ofColor_<float>::limit()  , 0.862745*ofColor_<float>::limit()  , 0.862745*ofColor_<float>::limit()); })
		.def_property_readonly_static("ghostWhite"     , [](py::object &cla) { return ofFloatColor(0.972549*ofColor_<float>::limit()  , 0.972549*ofColor_<float>::limit()  , 1*ofColor_<float>::limit()); })
		.def_property_readonly_static("gold"           , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.843137*ofColor_<float>::limit()  , 0*ofColor_<float>::limit()); })
		.def_property_readonly_static("goldenRod"      , [](py::object &cla) { return ofFloatColor(0.854902*ofColor_<float>::limit()  , 0.647059*ofColor_<float>::limit()  , 0.12549*ofColor_<float>::limit()); })
		.def_property_readonly_static("grey"           , [](py::object &cla) { return ofFloatColor(0.501961*ofColor_<float>::limit()  , 0.501961*ofColor_<float>::limit()  , 0.501961*ofColor_<float>::limit()); })
		.def_property_readonly_static("greenYellow"    , [](py::object &cla) { return ofFloatColor(0.678431*ofColor_<float>::limit()  , 1*ofColor_<float>::limit()         , 0.184314*ofColor_<float>::limit()); })
		.def_property_readonly_static("honeyDew"       , [](py::object &cla) { return ofFloatColor(0.941176*ofColor_<float>::limit()  , 1*ofColor_<float>::limit()         , 0.941176*ofColor_<float>::limit()); })
		.def_property_readonly_static("hotPink"        , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.411765*ofColor_<float>::limit()  , 0.705882*ofColor_<float>::limit()); })
		.def_property_readonly_static("indianRed"      , [](py::object &cla) { return ofFloatColor(0.803922*ofColor_<float>::limit()  , 0.360784*ofColor_<float>::limit()  , 0.360784*ofColor_<float>::limit()); })
		.def_property_readonly_static("indigo"         , [](py::object &cla) { return ofFloatColor(0.294118*ofColor_<float>::limit()  , 0*ofColor_<float>::limit()         , 0.509804*ofColor_<float>::limit()); })
		.def_property_readonly_static("ivory"          , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 1*ofColor_<float>::limit()         , 0.941176*ofColor_<float>::limit()); })
		.def_property_readonly_static("khaki"          , [](py::object &cla) { return ofFloatColor(0.941176*ofColor_<float>::limit()  , 0.901961*ofColor_<float>::limit()  , 0.54902*ofColor_<float>::limit()); })
		.def_property_readonly_static("lavender"       , [](py::object &cla) { return ofFloatColor(0.901961*ofColor_<float>::limit()  , 0.901961*ofColor_<float>::limit()  , 0.980392*ofColor_<float>::limit()); })
		.def_property_readonly_static("lavenderBlush"  , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.941176*ofColor_<float>::limit()  , 0.960784*ofColor_<float>::limit()); })
		.def_property_readonly_static("lawnGreen"      , [](py::object &cla) { return ofFloatColor(0.486275*ofColor_<float>::limit()  , 0.988235*ofColor_<float>::limit()  , 0*ofColor_<float>::limit()); })
		.def_property_readonly_static("lemonChiffon"   , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.980392*ofColor_<float>::limit()  , 0.803922*ofColor_<float>::limit()); })
		.def_property_readonly_static("lightBlue"      , [](py::object &cla) { return ofFloatColor(0.678431*ofColor_<float>::limit()  , 0.847059*ofColor_<float>::limit()  , 0.901961*ofColor_<float>::limit()); })
		.def_property_readonly_static("lightCoral"     , [](py::object &cla) { return ofFloatColor(0.941176*ofColor_<float>::limit()  , 0.501961*ofColor_<float>::limit()  , 0.501961*ofColor_<float>::limit()); })
		.def_property_readonly_static("lightCyan"      , [](py::object &cla) { return ofFloatColor(0.878431*ofColor_<float>::limit()  , 1*ofColor_<float>::limit()         , 1*ofColor_<float>::limit()); })
		.def_property_readonly_static("lightGoldenRodYellow" , [](py::object &cla) { return ofFloatColor(0.980392*ofColor_<float>::limit()  , 0.980392*ofColor_<float>::limit()  , 0.823529*ofColor_<float>::limit()); })
		.def_property_readonly_static("lightGray"      , [](py::object &cla) { return ofFloatColor(0.827451*ofColor_<float>::limit()  , 0.827451*ofColor_<float>::limit()  , 0.827451*ofColor_<float>::limit()); })
		.def_property_readonly_static("lightGrey"      , [](py::object &cla) { return ofFloatColor(0.827451*ofColor_<float>::limit()  , 0.827451*ofColor_<float>::limit()  , 0.827451*ofColor_<float>::limit()); })
		.def_property_readonly_static("lightGreen"     , [](py::object &cla) { return ofFloatColor(0.564706*ofColor_<float>::limit()  , 0.933333*ofColor_<float>::limit()  , 0.564706*ofColor_<float>::limit()); })
		.def_property_readonly_static("lightPink"      , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.713726*ofColor_<float>::limit()  , 0.756863*ofColor_<float>::limit()); })
		.def_property_readonly_static("lightSalmon"    , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.627451*ofColor_<float>::limit()  , 0.478431*ofColor_<float>::limit()); })
		.def_property_readonly_static("lightSeaGreen"  , [](py::object &cla) { return ofFloatColor(0.12549*ofColor_<float>::limit()   , 0.698039*ofColor_<float>::limit()  , 0.666667*ofColor_<float>::limit()); })
		.def_property_readonly_static("lightSkyBlue"   , [](py::object &cla) { return ofFloatColor(0.529412*ofColor_<float>::limit()  , 0.807843*ofColor_<float>::limit()  , 0.980392*ofColor_<float>::limit()); })
		.def_property_readonly_static("lightSlateGray" , [](py::object &cla) { return ofFloatColor(0.466667*ofColor_<float>::limit()  , 0.533333*ofColor_<float>::limit()  , 0.6*ofColor_<float>::limit()); })
		.def_property_readonly_static("lightSlateGrey" , [](py::object &cla) { return ofFloatColor(0.466667*ofColor_<float>::limit()  , 0.533333*ofColor_<float>::limit()  , 0.6*ofColor_<float>::limit()); })
		.def_property_readonly_static("lightSteelBlue" , [](py::object &cla) { return ofFloatColor(0.690196*ofColor_<float>::limit()  , 0.768627*ofColor_<float>::limit()  , 0.870588*ofColor_<float>::limit()); })
		.def_property_readonly_static("lightYellow"    , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 1*ofColor_<float>::limit()         , 0.878431*ofColor_<float>::limit()); })
		.def_property_readonly_static("lime"           , [](py::object &cla) { return ofFloatColor(0*ofColor_<float>::limit()         , 1*ofColor_<float>::limit()         , 0*ofColor_<float>::limit()); })
		.def_property_readonly_static("limeGreen"      , [](py::object &cla) { return ofFloatColor(0.196078*ofColor_<float>::limit()  , 0.803922*ofColor_<float>::limit()  , 0.196078*ofColor_<float>::limit()); })
		.def_property_readonly_static("linen"          , [](py::object &cla) { return ofFloatColor(0.980392*ofColor_<float>::limit()  , 0.941176*ofColor_<float>::limit()  , 0.901961*ofColor_<float>::limit()); })
		.def_property_readonly_static("maroon"         , [](py::object &cla) { return ofFloatColor(0.501961*ofColor_<float>::limit()  , 0*ofColor_<float>::limit()         , 0*ofColor_<float>::limit()); })
		.def_property_readonly_static("mediumAquaMarine" , [](py::object &cla) { return ofFloatColor(0.4*ofColor_<float>::limit()       , 0.803922*ofColor_<float>::limit()  , 0.666667*ofColor_<float>::limit()); })
		.def_property_readonly_static("mediumBlue"       , [](py::object &cla) { return ofFloatColor(0*ofColor_<float>::limit()         , 0*ofColor_<float>::limit()         , 0.803922*ofColor_<float>::limit()); })
		.def_property_readonly_static("mediumOrchid"     , [](py::object &cla) { return ofFloatColor(0.729412*ofColor_<float>::limit()  , 0.333333*ofColor_<float>::limit()  , 0.827451*ofColor_<float>::limit()); })
		.def_property_readonly_static("mediumPurple"     , [](py::object &cla) { return ofFloatColor(0.576471*ofColor_<float>::limit()  , 0.439216*ofColor_<float>::limit()  , 0.858824*ofColor_<float>::limit()); })
		.def_property_readonly_static("mediumSeaGreen"   , [](py::object &cla) { return ofFloatColor(0.235294*ofColor_<float>::limit()  , 0.701961*ofColor_<float>::limit()  , 0.443137*ofColor_<float>::limit()); })
		.def_property_readonly_static("mediumSlateBlue"  , [](py::object &cla) { return ofFloatColor(0.482353*ofColor_<float>::limit()  , 0.407843*ofColor_<float>::limit()  , 0.933333*ofColor_<float>::limit()); })
		.def_property_readonly_static("mediumSpringGreen", [](py::object &cla) { return ofFloatColor(0*ofColor_<float>::limit()         , 0.980392*ofColor_<float>::limit()  , 0.603922*ofColor_<float>::limit()); })
		.def_property_readonly_static("mediumTurquoise"  , [](py::object &cla) { return ofFloatColor(0.282353*ofColor_<float>::limit()  , 0.819608*ofColor_<float>::limit()  , 0.8*ofColor_<float>::limit()); })
		.def_property_readonly_static("mediumVioletRed"  , [](py::object &cla) { return ofFloatColor(0.780392*ofColor_<float>::limit()  , 0.0823529*ofColor_<float>::limit() , 0.521569*ofColor_<float>::limit()); })
		.def_property_readonly_static("midnightBlue"     , [](py::object &cla) { return ofFloatColor(0.0980392*ofColor_<float>::limit() , 0.0980392*ofColor_<float>::limit() , 0.439216*ofColor_<float>::limit()); })
		.def_property_readonly_static("mintCream"        , [](py::object &cla) { return ofFloatColor(0.960784*ofColor_<float>::limit()  , 1*ofColor_<float>::limit()         , 0.980392*ofColor_<float>::limit()); })
		.def_property_readonly_static("mistyRose"        , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.894118*ofColor_<float>::limit()  , 0.882353*ofColor_<float>::limit()); })
		.def_property_readonly_static("moccasin"         , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.894118*ofColor_<float>::limit()  , 0.709804*ofColor_<float>::limit()); })
		.def_property_readonly_static("navajoWhite"      , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.870588*ofColor_<float>::limit()  , 0.678431*ofColor_<float>::limit()); })
		.def_property_readonly_static("navy"             , [](py::object &cla) { return ofFloatColor(0*ofColor_<float>::limit()         , 0*ofColor_<float>::limit()         , 0.501961*ofColor_<float>::limit()); })
		.def_property_readonly_static("oldLace"          , [](py::object &cla) { return ofFloatColor(0.992157*ofColor_<float>::limit()  , 0.960784*ofColor_<float>::limit()  , 0.901961*ofColor_<float>::limit()); })
		.def_property_readonly_static("olive"            , [](py::object &cla) { return ofFloatColor(0.501961*ofColor_<float>::limit()  , 0.501961*ofColor_<float>::limit()  , 0*ofColor_<float>::limit()); })
		.def_property_readonly_static("oliveDrab"        , [](py::object &cla) { return ofFloatColor(0.419608*ofColor_<float>::limit()  , 0.556863*ofColor_<float>::limit()  , 0.137255*ofColor_<float>::limit()); })
		.def_property_readonly_static("orange"           , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.647059*ofColor_<float>::limit()  , 0*ofColor_<float>::limit()); })
		.def_property_readonly_static("orangeRed"        , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.270588*ofColor_<float>::limit()  , 0*ofColor_<float>::limit()); })
		.def_property_readonly_static("orchid"           , [](py::object &cla) { return ofFloatColor(0.854902*ofColor_<float>::limit()  , 0.439216*ofColor_<float>::limit()  , 0.839216*ofColor_<float>::limit()); })
		.def_property_readonly_static("paleGoldenRod"    , [](py::object &cla) { return ofFloatColor(0.933333*ofColor_<float>::limit()  , 0.909804*ofColor_<float>::limit()  , 0.666667*ofColor_<float>::limit()); })
		.def_property_readonly_static("paleGreen"        , [](py::object &cla) { return ofFloatColor(0.596078*ofColor_<float>::limit()  , 0.984314*ofColor_<float>::limit()  , 0.596078*ofColor_<float>::limit()); })
		.def_property_readonly_static("paleTurquoise"    , [](py::object &cla) { return ofFloatColor(0.686275*ofColor_<float>::limit()  , 0.933333*ofColor_<float>::limit()  , 0.933333*ofColor_<float>::limit()); })
		.def_property_readonly_static("paleVioletRed"    , [](py::object &cla) { return ofFloatColor(0.858824*ofColor_<float>::limit()  , 0.439216*ofColor_<float>::limit()  , 0.576471*ofColor_<float>::limit()); })
		.def_property_readonly_static("papayaWhip"   , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.937255*ofColor_<float>::limit()  , 0.835294*ofColor_<float>::limit()); })
		.def_property_readonly_static("peachPuff"    , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.854902*ofColor_<float>::limit()  , 0.72549*ofColor_<float>::limit()); })
		.def_property_readonly_static("peru"         , [](py::object &cla) { return ofFloatColor(0.803922*ofColor_<float>::limit()  , 0.521569*ofColor_<float>::limit()  , 0.247059*ofColor_<float>::limit()); })
		.def_property_readonly_static("pink"         , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.752941*ofColor_<float>::limit()  , 0.796078*ofColor_<float>::limit()); })
		.def_property_readonly_static("plum"         , [](py::object &cla) { return ofFloatColor(0.866667*ofColor_<float>::limit()  , 0.627451*ofColor_<float>::limit()  , 0.866667*ofColor_<float>::limit()); })
		.def_property_readonly_static("powderBlue"   , [](py::object &cla) { return ofFloatColor(0.690196*ofColor_<float>::limit()  , 0.878431*ofColor_<float>::limit()  , 0.901961*ofColor_<float>::limit()); })
		.def_property_readonly_static("purple"       , [](py::object &cla) { return ofFloatColor(0.501961*ofColor_<float>::limit()  , 0*ofColor_<float>::limit()         , 0.501961*ofColor_<float>::limit()); })
		.def_property_readonly_static("rosyBrown"    , [](py::object &cla) { return ofFloatColor(0.737255*ofColor_<float>::limit()  , 0.560784*ofColor_<float>::limit()  , 0.560784*ofColor_<float>::limit()); })
		.def_property_readonly_static("royalBlue"    , [](py::object &cla) { return ofFloatColor(0.254902*ofColor_<float>::limit()  , 0.411765*ofColor_<float>::limit()  , 0.882353*ofColor_<float>::limit()); })
		.def_property_readonly_static("saddleBrown"  , [](py::object &cla) { return ofFloatColor(0.545098*ofColor_<float>::limit()  , 0.270588*ofColor_<float>::limit()  , 0.0745098*ofColor_<float>::limit()); })
		.def_property_readonly_static("salmon"       , [](py::object &cla) { return ofFloatColor(0.980392*ofColor_<float>::limit()  , 0.501961*ofColor_<float>::limit()  , 0.447059*ofColor_<float>::limit()); })
		.def_property_readonly_static("sandyBrown"   , [](py::object &cla) { return ofFloatColor(0.956863*ofColor_<float>::limit()  , 0.643137*ofColor_<float>::limit()  , 0.376471*ofColor_<float>::limit()); })
		.def_property_readonly_static("seaGreen"     , [](py::object &cla) { return ofFloatColor(0.180392*ofColor_<float>::limit()  , 0.545098*ofColor_<float>::limit()  , 0.341176*ofColor_<float>::limit()); })
		.def_property_readonly_static("seaShell"     , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.960784*ofColor_<float>::limit()  , 0.933333*ofColor_<float>::limit()); })
		.def_property_readonly_static("sienna"       , [](py::object &cla) { return ofFloatColor(0.627451*ofColor_<float>::limit()  , 0.321569*ofColor_<float>::limit()  , 0.176471*ofColor_<float>::limit()); })
		.def_property_readonly_static("silver"       , [](py::object &cla) { return ofFloatColor(0.752941*ofColor_<float>::limit()  , 0.752941*ofColor_<float>::limit()  , 0.752941*ofColor_<float>::limit()); })
		.def_property_readonly_static("skyBlue"      , [](py::object &cla) { return ofFloatColor(0.529412*ofColor_<float>::limit()  , 0.807843*ofColor_<float>::limit()  , 0.921569*ofColor_<float>::limit()); })
		.def_property_readonly_static("slateBlue"    , [](py::object &cla) { return ofFloatColor(0.415686*ofColor_<float>::limit()  , 0.352941*ofColor_<float>::limit()  , 0.803922*ofColor_<float>::limit()); })
		.def_property_readonly_static("slateGray"    , [](py::object &cla) { return ofFloatColor(0.439216*ofColor_<float>::limit()  , 0.501961*ofColor_<float>::limit()  , 0.564706*ofColor_<float>::limit()); })
		.def_property_readonly_static("slateGrey"    , [](py::object &cla) { return ofFloatColor(0.439216*ofColor_<float>::limit()  , 0.501961*ofColor_<float>::limit()  , 0.564706*ofColor_<float>::limit()); })
		.def_property_readonly_static("snow"         , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.980392*ofColor_<float>::limit()  , 0.980392*ofColor_<float>::limit()); })
		.def_property_readonly_static("springGreen"  , [](py::object &cla) { return ofFloatColor(0*ofColor_<float>::limit()         , 1*ofColor_<float>::limit()         , 0.498039*ofColor_<float>::limit()); })
		.def_property_readonly_static("steelBlue"    , [](py::object &cla) { return ofFloatColor(0.27451*ofColor_<float>::limit()   , 0.509804*ofColor_<float>::limit()  , 0.705882*ofColor_<float>::limit()); })
		.def_property_readonly_static("blueSteel"    , [](py::object &cla) { return ofFloatColor(0.27451*ofColor_<float>::limit()   , 0.509804*ofColor_<float>::limit()  , 0.705882*ofColor_<float>::limit()); })
		.def_property_readonly_static("tan"          , [](py::object &cla) { return ofFloatColor(0.823529*ofColor_<float>::limit()  , 0.705882*ofColor_<float>::limit()  , 0.54902*ofColor_<float>::limit()); })
		.def_property_readonly_static("teal"         , [](py::object &cla) { return ofFloatColor(0*ofColor_<float>::limit()         , 0.501961*ofColor_<float>::limit()  , 0.501961*ofColor_<float>::limit()); })
		.def_property_readonly_static("thistle"      , [](py::object &cla) { return ofFloatColor(0.847059*ofColor_<float>::limit()  , 0.74902*ofColor_<float>::limit()   , 0.847059*ofColor_<float>::limit()); })
		.def_property_readonly_static("tomato"       , [](py::object &cla) { return ofFloatColor(1*ofColor_<float>::limit()         , 0.388235*ofColor_<float>::limit()  , 0.278431*ofColor_<float>::limit()); })
		.def_property_readonly_static("turquoise"    , [](py::object &cla) { return ofFloatColor(0.25098*ofColor_<float>::limit()   , 0.878431*ofColor_<float>::limit()  , 0.815686*ofColor_<float>::limit()); })
		.def_property_readonly_static("violet"       , [](py::object &cla) { return ofFloatColor(0.933333*ofColor_<float>::limit()  , 0.509804*ofColor_<float>::limit()  , 0.933333*ofColor_<float>::limit()); })
		.def_property_readonly_static("wheat"        , [](py::object &cla) { return ofFloatColor(0.960784*ofColor_<float>::limit()  , 0.870588*ofColor_<float>::limit()  , 0.701961*ofColor_<float>::limit()); })
		.def_property_readonly_static("whiteSmoke"   , [](py::object &cla) { return ofFloatColor(0.960784*ofColor_<float>::limit()  , 0.960784*ofColor_<float>::limit()  , 0.960784*ofColor_<float>::limit()); })
		.def_property_readonly_static("yellowGreen"  , [](py::object &cla) { return ofFloatColor(0.603922*ofColor_<float>::limit()  , 0.803922*ofColor_<float>::limit()  , 0.196078*ofColor_<float>::limit()); })
		.def("__str__", [](const ofColor_<float> &c) { return "["+std::to_string(c.r)+", " + std::to_string(c.g) + ", " + std::to_string(c.b) + ", " + std::to_string(c.a) + "]";} );
		
	py::class_<ofStyle>(m, "ofStyle")
		.def(py::init<>())
		.def_readwrite("color",            &ofStyle::color)
		.def_readwrite("bgColor",          &ofStyle::bgColor)
		.def_readwrite("polyMode",         &ofStyle::polyMode)
		.def_readwrite("rectMode",         &ofStyle::rectMode)
		.def_readwrite("bFill",            &ofStyle::bFill)
		.def_readwrite("drawBitmapMode",   &ofStyle::drawBitmapMode)
		.def_readwrite("blendingMode",     &ofStyle::blendingMode)
		.def_readwrite("smoothing",        &ofStyle::smoothing)
		.def_readwrite("circleResolution", &ofStyle::circleResolution)
		.def_readwrite("sphereResolution", &ofStyle::sphereResolution)
		.def_readwrite("curveResolution",  &ofStyle::curveResolution)
		.def_readwrite("lineWidth",        &ofStyle::lineWidth);

	py::class_<ofRectangle>(m, "ofRectangle")
		.def(py::init<>())
		.def(py::init<const ofPoint &, float, float>())
		.def(py::init<const ofPoint &, const ofPoint &>())
		.def(py::init<const ofRectangle &>())
		.def(py::init<float, float, float, float>())
		.def("set", (void (ofRectangle::*)(float, float, float, float)) &ofRectangle::set)
		.def("set", (void (ofRectangle::*)(const ofPoint&, float, float)) &ofRectangle::set)
		.def("set", (void (ofRectangle::*)(const ofRectangle&)) &ofRectangle::set)
		.def("set", (void (ofRectangle::*)(const ofPoint&, const ofPoint&)) &ofRectangle::set)
		.def("setX", (void (ofRectangle::*)(float)) &ofRectangle::setX)
		.def("setY", (void (ofRectangle::*)(float)) &ofRectangle::setY)
		.def("setWidth", (void (ofRectangle::*)(float)) &ofRectangle::setWidth)
		.def("setHeight", (void (ofRectangle::*)(float)) &ofRectangle::setHeight)
		.def("setPosition", (void (ofRectangle::*)(float, float)) &ofRectangle::setPosition)
		.def("setPosition", (void (ofRectangle::*)(const ofPoint& )) &ofRectangle::setPosition)
		.def("setSize", (void (ofRectangle::*)(float, float)) &ofRectangle::setSize)
		.def("setFromCenter", (void (ofRectangle::*)(float, float, float, float)) &ofRectangle::setFromCenter)
		.def("setFromCenter", (void (ofRectangle::*)(const ofPoint&, float, float)) &ofRectangle::setFromCenter)
		.def("translate", (void (ofRectangle::*)(float, float)) &ofRectangle::translate)
		.def("translate", (void (ofRectangle::*)(const ofPoint&)) &ofRectangle::translate)
		.def("translateX", (void (ofRectangle::*)(float)) &ofRectangle::translateX)
		.def("translateY", (void (ofRectangle::*)(float)) &ofRectangle::translateY)
		.def("scale", (void (ofRectangle::*)(float)) &ofRectangle::scale)
		.def("scale", (void (ofRectangle::*)(float,float)) &ofRectangle::scale)
		.def("scale", (void (ofRectangle::*)(const ofPoint&)) &ofRectangle::scale)
		.def("scaleWidth", (void (ofRectangle::*)(float)) &ofRectangle::scaleWidth)
		.def("scaleHeight", (void (ofRectangle::*)(float)) &ofRectangle::scaleHeight)
		.def("scaleFromCenter", (void (ofRectangle::*)(float)) &ofRectangle::scaleFromCenter)
		.def("scaleFromCenter", (void (ofRectangle::*)(float,float)) &ofRectangle::scaleFromCenter)
		.def("scaleFromCenter", (void (ofRectangle::*)(const ofPoint&)) &ofRectangle::scaleFromCenter)
		.def("scaleTo", (void (ofRectangle::*)(const ofRectangle&, ofScaleMode)) &ofRectangle::scaleTo)
		.def("scaleTo", (void (ofRectangle::*)(const ofRectangle&, ofAspectRatioMode, ofAlignHorz, ofAlignVert)) &ofRectangle::scaleTo)
		.def("scaleTo", (void (ofRectangle::*)(const ofRectangle&, ofAspectRatioMode, ofAlignHorz, ofAlignVert, ofAlignHorz, ofAlignVert)) &ofRectangle::scaleTo)
		.def("alignToHorz", (void (ofRectangle::*)(const float&, ofAlignHorz)) &ofRectangle::alignToHorz)
		.def("alignToHorz", (void (ofRectangle::*)(const ofRectangle&, ofAlignHorz)) &ofRectangle::alignToHorz)
		.def("alignToHorz", (void (ofRectangle::*)(const ofRectangle&, ofAlignHorz, ofAlignHorz)) &ofRectangle::alignToHorz)
		.def("alignToVert", (void (ofRectangle::*)(const float&, ofAlignVert)) &ofRectangle::alignToVert)
		.def("alignToVert", (void (ofRectangle::*)(const ofRectangle&, ofAlignVert)) &ofRectangle::alignToVert)
		.def("alignToVert", (void (ofRectangle::*)(const ofRectangle&, ofAlignVert, ofAlignVert)) &ofRectangle::alignToVert)
		.def("alignTo", (void (ofRectangle::*)(const ofPoint&, ofAlignHorz, ofAlignVert)) &ofRectangle::alignTo)
		.def("alignTo", (void (ofRectangle::*)(const ofRectangle&, ofAlignHorz, ofAlignVert)) &ofRectangle::alignTo)
		.def("alignTo", (void (ofRectangle::*)(const ofRectangle&, ofAlignHorz, ofAlignVert, ofAlignHorz, ofAlignVert)) &ofRectangle::alignTo)
		.def("inside", (bool (ofRectangle::*)(float, float) const) &ofRectangle::inside)
		.def("inside", (bool (ofRectangle::*)(const ofPoint&) const) &ofRectangle::inside)
		.def("inside", (bool (ofRectangle::*)(const ofRectangle&) const) &ofRectangle::inside)
		.def("inside", (bool (ofRectangle::*)(const ofPoint&, const ofPoint&) const) &ofRectangle::inside)
		.def("intersects", (bool (ofRectangle::*)(const ofRectangle&) const) &ofRectangle::intersects)
		.def("intersects", (bool (ofRectangle::*)(const ofPoint&, const ofPoint&) const) &ofRectangle::intersects)
		.def("growToInclude", (void (ofRectangle::*)(float, float)) &ofRectangle::growToInclude)
		.def("growToInclude", (void (ofRectangle::*)(const ofPoint&)) &ofRectangle::growToInclude)
		.def("growToInclude", (void (ofRectangle::*)(const ofRectangle&)) &ofRectangle::growToInclude)
		.def("growToInclude", (void (ofRectangle::*)(const ofPoint&, const ofPoint&)) &ofRectangle::growToInclude)
		.def("getIntersection", (ofRectangle (ofRectangle::*)(const ofRectangle&) const) &ofRectangle::getIntersection)
		.def("getUnion", (ofRectangle (ofRectangle::*)(const ofRectangle&) const) &ofRectangle::getUnion)
		.def("getStandardized", (ofRectangle (ofRectangle::*)() const) &ofRectangle::getStandardized)
		.def("isStandardized", (bool (ofRectangle::*)() const) &ofRectangle::isStandardized)
		.def("isEmpty", (bool (ofRectangle::*)() const) &ofRectangle::isEmpty)
		.def("isZero", (bool (ofRectangle::*)() const) &ofRectangle::isZero)
		.def("getArea", (float (ofRectangle::*)() const) &ofRectangle::getArea)
		.def("getPerimeter", (float (ofRectangle::*)() const) &ofRectangle::getPerimeter)
		.def("getAspectRatio", (float (ofRectangle::*)() const) &ofRectangle::getAspectRatio)
		.def("getMin", (ofPoint (ofRectangle::*)() const) &ofRectangle::getMin)
		.def("getMax", (ofPoint (ofRectangle::*)() const) &ofRectangle::getMax)
		.def("getMinX", (float (ofRectangle::*)() const) &ofRectangle::getMinX)
		.def("getMaxX", (float (ofRectangle::*)() const) &ofRectangle::getMaxX)
		.def("getMinY", (float (ofRectangle::*)() const) &ofRectangle::getMinY)
		.def("getMaxY", (float (ofRectangle::*)() const) &ofRectangle::getMaxY)
		.def("getLeft", (float (ofRectangle::*)() const) &ofRectangle::getLeft)
		.def("getRight", (float (ofRectangle::*)() const) &ofRectangle::getRight)
		.def("getTop", (float (ofRectangle::*)() const) &ofRectangle::getTop)
		.def("getBottom", (float (ofRectangle::*)() const) &ofRectangle::getBottom)
		.def("getTopLeft", (ofPoint (ofRectangle::*)() const) &ofRectangle::getTopLeft)
		.def("getTopRight", (ofPoint (ofRectangle::*)() const) &ofRectangle::getTopRight)
		.def("getBottomLeft", (ofPoint (ofRectangle::*)() const) &ofRectangle::getBottomLeft)
		.def("getBottomRight", (ofPoint (ofRectangle::*)() const) &ofRectangle::getBottomRight)
		.def("getHorzAnchor", (float (ofRectangle::*)(ofAlignHorz) const) &ofRectangle::getHorzAnchor)
		.def("getVertAnchor", (float (ofRectangle::*)(ofAlignVert) const) &ofRectangle::getVertAnchor)
		.def("getPosition", (ofPoint (ofRectangle::*)() const) &ofRectangle::getPosition)
		.def("getPositionRef", (ofPoint& (ofRectangle::*)() const) &ofRectangle::getPositionRef)
		.def("getCenter", (ofPoint (ofRectangle::*)() const) &ofRectangle::getCenter)
		.def("getX", &ofRectangle::getX)
		.def("getY", &ofRectangle::getY)
		.def("getWidth", &ofRectangle::getWidth)
		.def("getHeight", &ofRectangle::getHeight)
		.def(py::self == py::self)
		.def(py::self != py::self)
		.def("__sub__", [](const ofRectangle& rect, const ofPoint& p){
			ofRectangle ret(rect);
			ret.x = rect.x - p.x;
			ret.y = rect.x - p.y;
			return ret;
		})
		.def("__add__", [](const ofRectangle& rect, const ofPoint& p){
			ofRectangle ret(rect);
			ret.x = rect.x + p.x;
			ret.y = rect.x + p.y;
			return ret;
		})
		.def_property("x", &ofRectangle::getX, &ofRectangle::setX)
		.def_property("y", &ofRectangle::getY, &ofRectangle::setY)
		.def_property("width", &ofRectangle::getWidth, &ofRectangle::setWidth)
		.def_property("height", &ofRectangle::getHeight, &ofRectangle::setHeight)
		.def("__str__", [](const ofRectangle& r){
			return "[ "+ std::to_string(r.x)+" , " +std::to_string(r.y)+" , "+std::to_string(r.width)+" , "+ std::to_string(r.height) +" ]";
		});

		// .def_property("position", &ofRectangle::getPosition, &ofRectangle::setPosition);
	py::class_<ofSerialDeviceInfo>(m, "ofSerialDeviceInfo")
		.def(py::init<>())
		.def(py::init<string, string, int>())
		.def("getDevicePath", &ofSerialDeviceInfo::getDevicePath)
		.def("getDeviceName", &ofSerialDeviceInfo::getDeviceName)
		.def("getDeviceID",   &ofSerialDeviceInfo::getDeviceID);
		
	py::class_<ofVideoFormat>(m, "ofVideoFormat")
		.def_readwrite("pixelFormat", &ofVideoFormat::pixelFormat)
		.def_readwrite("width",       &ofVideoFormat::width)
		.def_readwrite("height",      &ofVideoFormat::height)
		.def_readwrite("framerates",  &ofVideoFormat::framerates);

	py::class_<ofVideoDevice>(m, "ofVideoDevice")
		.def_readwrite("id",           &ofVideoDevice::id)
		.def_readwrite("deviceName",   &ofVideoDevice::deviceName)
		.def_readwrite("hardwareName", &ofVideoDevice::hardwareName)
		.def_readwrite("serialID",     &ofVideoDevice::serialID)
		.def_readwrite("formats",      &ofVideoDevice::formats)
		.def_readwrite("bAvailable",   &ofVideoDevice::bAvailable);

	py::class_<ofBoolParameter>(m, "ofBoolParameter");
	py::class_<ofCharParameter>(m, "ofCharParameter");
	py::class_<ofIntParameter>(m, "ofIntParameter");
	py::class_<ofFloatParameter>(m, "ofFloatParameter");
	py::class_<ofStringParameter>(m, "ofStringParameter");
	py::class_<ofV2fParameter>(m, "ofV2fParameter");
	py::class_<ofV3fParameter>(m, "ofV3fParameter");
	py::class_<ofV4fParameter>(m, "ofV4fParameter");
	py::class_<ofColorParameter>(m, "ofColorParameter");
	py::class_<ofShortColorParameter>(m, "ofShortColorParameter");
	py::class_<ofFloatColorParameter>(m, "ofFloatColorParameter");
	m.attr("ofPointParameter") = m.attr("ofV3fParameter");
	
	// py::class_<pyOfFloatParameterBase, pyOfFloatParameter>(m, "ofFloatParameter", py::dynamic_attr())
 //        // .def("onChanged", &pyOfFloatParameter::onChanged, "事件处理 onChanged(self, floatV)")
	// 	.def(py::init<>())
	// 	.def(py::init<const ofFloatParameter&>())
	// 	.def(py::init<const float&>())
	// 	.def(py::init<const string&, const float&>())
	// 	.def(py::init<const string&, const float&, const float&, const float&>())
	// 	.def("fromString", &pyOfFloatParameter::fromString)
	// 	.def("get", &pyOfFloatParameter::get)
	// 	// .def("set", [](pyOfFloatParameter &m,const float &v){ return m.set(v);})
	// 	.def("set", (ofFloatParameter& (pyOfFloatParameter::*)(const float &)) &pyOfFloatParameter::set)
	// 	// .def("set", (pyOfFloatParameter& (pyOfFloatParameter::*)(const string &, const float &)) &pyOfFloatParameter::set)
	// 	// .def("set", (pyOfFloatParameter& (pyOfFloatParameter::*)(const string &, const float &, const float &, const float &)) &pyOfFloatParameter::set)
	// 	.def("getMin", &pyOfFloatParameter::getMin)
	// 	.def("setMin", &pyOfFloatParameter::setMin)
	// 	.def("getMax", &pyOfFloatParameter::getMax)
	// 	.def("setMax", &pyOfFloatParameter::setMax)
	// 	.def("getName", &pyOfFloatParameter::getName)
	// 	.def("setName", &pyOfFloatParameter::setName)
	// 	.def("getFirstParent", &pyOfFloatParameter::getFirstParent)
	// 	.def("isReadOnly", &pyOfFloatParameter::isReadOnly)
	// 	.def("isSerializable", &pyOfFloatParameter::isSerializable)
	// 	.def("setSerializable", &pyOfFloatParameter::setSerializable)
	// 	.def("setParent", &pyOfFloatParameter::setParent)
	// 	.def("makeReferenceTo", &pyOfFloatParameter::makeReferenceTo, py::keep_alive<2,1>())
	// 	.def("toString", &pyOfFloatParameter::toString)
	// 	.def("__str__", [](const pyOfFloatParameter &m){ return m.toString();});
		// .def("addListener", [](ofFloatParameter &m, py::object listener, py::function method, int prio){
		// 	listener.inc_ref();
		// 	return m.addListener(&listener, method, prio);
		// }, "listener"_a, "method"_a, "prio"_a=OF_EVENT_ORDER_AFTER_APP)
		// .def("removeListener", [](ofFloatParameter &m, py::object listener, py::function method, int prio){
		// 	listener.inc_ref();
		// 	return m.removeListener(&listener, method, prio);
		// }, "listener"_a, "method"_a, "prio"_a=OF_EVENT_ORDER_AFTER_APP);

}